
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000005ac  00000640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000a4  008000a4  00000684  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001290  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000933  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077f  00000000  00000000  0000234b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00002acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000465  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006bd  00000000  00000000  00003065  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003722  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3b       	cpi	r26, 0xB5	; 181
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d6 01 	call	0x3ac	; 0x3ac <main>
  8a:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcdcommand>:
 */

#include "lcd_OneWireProtocol.h"
void lcdcommand(unsigned char cmnd)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd & 0xf0);		/* SEND COMMAND TO DATA PORT */
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT &= ~ (1<<LCD_RS);						/* RS = 0 FOR COMMAND */
  9e:	c2 98       	cbi	0x18, 2	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
  a0:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	32 e0       	ldi	r19, 0x02	; 2
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcdcommand+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcdcommand+0x18>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
  aa:	c3 98       	cbi	0x18, 3	; 24
  ac:	96 ef       	ldi	r25, 0xF6	; 246
  ae:	9a 95       	dec	r25
  b0:	f1 f7       	brne	.-4      	; 0xae <lcdcommand+0x1c>
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd << 4);		/* SEND COMMAND TO DATA PORT */
  b2:	28 b3       	in	r18, 0x18	; 24
  b4:	2f 70       	andi	r18, 0x0F	; 15
  b6:	30 e1       	ldi	r19, 0x10	; 16
  b8:	83 9f       	mul	r24, r19
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	82 2b       	or	r24, r18
  c0:	88 bb       	out	0x18, r24	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
  c2:	c3 9a       	sbi	0x18, 3	; 24
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcdcommand+0x34>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcdcommand+0x3a>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
  cc:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	86 e6       	ldi	r24, 0x66	; 102
  d0:	9e e0       	ldi	r25, 0x0E	; 14
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcdcommand+0x40>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <lcddata>:
	_delay_ms(2);									/* WAIT FOR MAKE ENABLE WIDE */
}

void lcddata(unsigned char data)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		/* SEND DATA TO DATA PORT */
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	9f 70       	andi	r25, 0x0F	; 15
  de:	28 2f       	mov	r18, r24
  e0:	20 7f       	andi	r18, 0xF0	; 240
  e2:	92 2b       	or	r25, r18
  e4:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_RS);						/* MAKE RS = 1 FOR DATA */
  e6:	c2 9a       	sbi	0x18, 2	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE */
  e8:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	32 e0       	ldi	r19, 0x02	; 2
  ec:	3a 95       	dec	r19
  ee:	f1 f7       	brne	.-4      	; 0xec <lcddata+0x12>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcddata+0x18>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
  f2:	c3 98       	cbi	0x18, 3	; 24
  f4:	96 ef       	ldi	r25, 0xF6	; 246
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcddata+0x1c>
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		/*  */
  fa:	28 b3       	in	r18, 0x18	; 24
  fc:	2f 70       	andi	r18, 0x0F	; 15
  fe:	30 e1       	ldi	r19, 0x10	; 16
 100:	83 9f       	mul	r24, r19
 102:	c0 01       	movw	r24, r0
 104:	11 24       	eor	r1, r1
 106:	82 2b       	or	r24, r18
 108:	88 bb       	out	0x18, r24	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE*/
 10a:	c3 9a       	sbi	0x18, 3	; 24
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <lcddata+0x34>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcddata+0x3a>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE*/
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE*/
 114:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	86 e6       	ldi	r24, 0x66	; 102
 118:	9e e0       	ldi	r25, 0x0E	; 14
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcddata+0x40>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <lcdinit>:
	_delay_ms(2);									/* WAIT FOR MAKE ENABLE WIDE*/
}

void lcdinit()
{
	LCD_DDDR = 0xFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 bb       	out	0x17, r24	; 23
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	8f e7       	ldi	r24, 0x7F	; 127
 12a:	94 e0       	ldi	r25, 0x04	; 4
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <lcdinit+0xa>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcdinit+0x14>
 136:	00 00       	nop
	_delay_ms(200);									/* WAIT FOR SOME TIME */
	lcdcommand(0x33);
 138:	83 e3       	ldi	r24, 0x33	; 51
 13a:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
	lcdcommand(0x32);								/* SEND $32 FOR INIT OT 0X02 */
 13e:	82 e3       	ldi	r24, 0x32	; 50
 140:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
	lcdcommand(0x28);								/* INIT. LCD 2 LINE, 5 X 7 MATRIX */
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
	lcdcommand(0x0C);								/* DISPLAY ON CURSOR ON */
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
	lcdcommand(0x01);								/* LCD CLEAR */
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
 156:	86 e6       	ldi	r24, 0x66	; 102
 158:	9e e0       	ldi	r25, 0x0E	; 14
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcdinit+0x38>
 15e:	00 00       	nop
	_delay_ms(2);
	lcdcommand(0x82);								/* SHIFT CURSOR TO WRITE */
 160:	82 e8       	ldi	r24, 0x82	; 130
 162:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
 166:	08 95       	ret

00000168 <lcd_gotoxy>:
}

void lcd_gotoxy(unsigned char x, unsigned char y)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	00 d0       	rcall	.+0      	; 0x16e <lcd_gotoxy+0x6>
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharadd[]={0x80, 0xC0};
 172:	90 e8       	ldi	r25, 0x80	; 128
 174:	99 83       	std	Y+1, r25	; 0x01
 176:	90 ec       	ldi	r25, 0xC0	; 192
 178:	9a 83       	std	Y+2, r25	; 0x02
	lcdcommand(firstcharadd[y] + x);
 17a:	fe 01       	movw	r30, r28
 17c:	e6 0f       	add	r30, r22
 17e:	f1 1d       	adc	r31, r1
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	89 0f       	add	r24, r25
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
}
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <lcd_print>:

void lcd_print(char *str)
{
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while (str[i] |= 0)
 19a:	80 81       	ld	r24, Z
 19c:	88 23       	and	r24, r24
 19e:	59 f0       	breq	.+22     	; 0x1b6 <lcd_print+0x24>
 1a0:	8f 01       	movw	r16, r30
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcddata(str[i]);
 1a4:	0e 94 6d 00 	call	0xda	; 0xda <lcddata>
		i++;
 1a8:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 1aa:	f8 01       	movw	r30, r16
 1ac:	ec 0f       	add	r30, r28
 1ae:	f1 1d       	adc	r31, r1
 1b0:	80 81       	ld	r24, Z
 1b2:	81 11       	cpse	r24, r1
 1b4:	f7 cf       	rjmp	.-18     	; 0x1a4 <lcd_print+0x12>
	{
		lcddata(str[i]);
		i++;
	}
}
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	08 95       	ret

000001be <lcd_clear>:

void lcd_clear()
{
	lcdcommand(0x01);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
 1c4:	86 e6       	ldi	r24, 0x66	; 102
 1c6:	9e e0       	ldi	r25, 0x0E	; 14
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_clear+0xa>
 1cc:	00 00       	nop
 1ce:	08 95       	ret

000001d0 <printADC>:
uint8_t c=0,I_RH,D_RH,I_Temp,D_Temp,CheckSum;
float perc = 0;
char DHTdata[5];
int view = 0;

void printADC(uint16_t adc) {
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	60 97       	sbiw	r28, 0x10	; 16
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	8c 01       	movw	r16, r24
	lcd_clear();
 1ea:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clear>
	perc = (1023 - adc) / 10;
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	33 e0       	ldi	r19, 0x03	; 3
 1f2:	20 1b       	sub	r18, r16
 1f4:	31 0b       	sbc	r19, r17
 1f6:	ad ec       	ldi	r26, 0xCD	; 205
 1f8:	bc ec       	ldi	r27, 0xCC	; 204
 1fa:	0e 94 90 02 	call	0x520	; 0x520 <__umulhisi3>
 1fe:	8c 01       	movw	r16, r24
 200:	16 95       	lsr	r17
 202:	07 95       	ror	r16
 204:	16 95       	lsr	r17
 206:	07 95       	ror	r16
 208:	16 95       	lsr	r17
 20a:	07 95       	ror	r16
 20c:	b8 01       	movw	r22, r16
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__floatunsisf>
 216:	60 93 a6 00 	sts	0x00A6, r22	; 0x8000a6 <perc>
 21a:	70 93 a7 00 	sts	0x00A7, r23	; 0x8000a7 <perc+0x1>
 21e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <perc+0x2>
 222:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <perc+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 226:	4a e0       	ldi	r20, 0x0A	; 10
 228:	be 01       	movw	r22, r28
 22a:	6f 5f       	subi	r22, 0xFF	; 255
 22c:	7f 4f       	sbci	r23, 0xFF	; 255
 22e:	c8 01       	movw	r24, r16
 230:	0e 94 9f 02 	call	0x53e	; 0x53e <__itoa_ncheck>
	char adcStr[16];
	itoa(perc, adcStr, 10);
	lcd_print("Light = ");
 234:	80 e6       	ldi	r24, 0x60	; 96
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
	lcd_print(adcStr);
 23c:	ce 01       	movw	r24, r28
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
	lcd_print("%");
 244:	89 e6       	ldi	r24, 0x69	; 105
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
}
 24c:	60 96       	adiw	r28, 0x10	; 16
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	08 95       	ret

00000262 <printDHT>:

void printDHT() {
	lcd_clear();
 262:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clear>
	
	if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum) {
 266:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <I_RH>
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	20 91 ab 00 	lds	r18, 0x00AB	; 0x8000ab <D_RH>
 270:	ac 01       	movw	r20, r24
 272:	42 0f       	add	r20, r18
 274:	51 1d       	adc	r21, r1
 276:	9a 01       	movw	r18, r20
 278:	40 91 ad 00 	lds	r20, 0x00AD	; 0x8000ad <I_Temp>
 27c:	24 0f       	add	r18, r20
 27e:	31 1d       	adc	r19, r1
 280:	40 91 af 00 	lds	r20, 0x00AF	; 0x8000af <D_Temp>
 284:	24 0f       	add	r18, r20
 286:	31 1d       	adc	r19, r1
 288:	40 91 ac 00 	lds	r20, 0x00AC	; 0x8000ac <CheckSum>
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	24 17       	cp	r18, r20
 290:	35 07       	cpc	r19, r21
 292:	49 f0       	breq	.+18     	; 0x2a6 <printDHT+0x44>
		lcd_gotoxy(0,0);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
		lcd_print("DHT Error");
 29c:	8b e6       	ldi	r24, 0x6B	; 107
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
		lcd_print(DHTdata);
		lcddata(0xDF);
		lcd_print("C ");
		return;
	}
	return;
 2a4:	08 95       	ret
 2a6:	4a e0       	ldi	r20, 0x0A	; 10
 2a8:	60 eb       	ldi	r22, 0xB0	; 176
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	0e 94 9f 02 	call	0x53e	; 0x53e <__itoa_ncheck>
	if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum) {
		lcd_gotoxy(0,0);
		lcd_print("DHT Error");
	} else {
		itoa(I_RH,DHTdata,10);
		lcd_print("Humidity = ");
 2b0:	85 e7       	ldi	r24, 0x75	; 117
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
		lcd_print(DHTdata);
 2b8:	80 eb       	ldi	r24, 0xB0	; 176
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
		lcd_print(".");
 2c0:	81 e8       	ldi	r24, 0x81	; 129
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
 2c8:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <D_RH>
 2cc:	4a e0       	ldi	r20, 0x0A	; 10
 2ce:	60 eb       	ldi	r22, 0xB0	; 176
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 9f 02 	call	0x53e	; 0x53e <__itoa_ncheck>
		
		itoa(D_RH,DHTdata,10);
		lcd_print(DHTdata);
 2d8:	80 eb       	ldi	r24, 0xB0	; 176
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
		lcd_print("%");
 2e0:	89 e6       	ldi	r24, 0x69	; 105
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
 2e8:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <I_Temp>
 2ec:	4a e0       	ldi	r20, 0x0A	; 10
 2ee:	60 eb       	ldi	r22, 0xB0	; 176
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 9f 02 	call	0x53e	; 0x53e <__itoa_ncheck>

		itoa(I_Temp,DHTdata,10);
		lcd_gotoxy(0,1);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
		lcd_print("Temp = ");
 300:	83 e8       	ldi	r24, 0x83	; 131
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
		lcd_print(DHTdata);
 308:	80 eb       	ldi	r24, 0xB0	; 176
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
		lcd_print(".");
 310:	81 e8       	ldi	r24, 0x81	; 129
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
 318:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <D_Temp>
 31c:	4a e0       	ldi	r20, 0x0A	; 10
 31e:	60 eb       	ldi	r22, 0xB0	; 176
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 9f 02 	call	0x53e	; 0x53e <__itoa_ncheck>
		
		itoa(D_Temp,DHTdata,10);
		lcd_print(DHTdata);
 328:	80 eb       	ldi	r24, 0xB0	; 176
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
		lcddata(0xDF);
 330:	8f ed       	ldi	r24, 0xDF	; 223
 332:	0e 94 6d 00 	call	0xda	; 0xda <lcddata>
		lcd_print("C ");
 336:	8b e8       	ldi	r24, 0x8B	; 139
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
 33e:	08 95       	ret

00000340 <Request>:
	return;
}

void Request()						/* Microcontroller send start pulse or request */
{
	DDRD |= (1<<DHT11_PIN); // Request is sent from MCU PIN
 340:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1<<DHT11_PIN);		/* set to low pin, pull down */
 342:	96 98       	cbi	0x12, 6	; 18
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	9f e8       	ldi	r25, 0x8F	; 143
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <Request+0x8>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <Request+0xe>
 34e:	00 00       	nop
	_delay_ms(20);					/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);		/* set to high pin, pull up */
 350:	96 9a       	sbi	0x12, 6	; 18
 352:	08 95       	ret

00000354 <Response>:
}

void Response()						/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN); // explicitly pull up PIN
 354:	8e 98       	cbi	0x11, 6	; 17
 	while(PIND & (1<<DHT11_PIN)); // check to see if state changed from high to low
 356:	86 99       	sbic	0x10, 6	; 16
 358:	fe cf       	rjmp	.-4      	; 0x356 <Response+0x2>
	while((PIND & (1<<DHT11_PIN))==0); // check if pulled down voltage is equal to zero
 35a:	86 9b       	sbis	0x10, 6	; 16
 35c:	fe cf       	rjmp	.-4      	; 0x35a <Response+0x6>
	while(PIND & (1<<DHT11_PIN)); // check to see if state change from low to high
 35e:	86 99       	sbic	0x10, 6	; 16
 360:	fe cf       	rjmp	.-4      	; 0x35e <Response+0xa>
}
 362:	08 95       	ret

00000364 <Receive_data>:

uint8_t Receive_data()							/* receive data */
{	
 364:	88 e0       	ldi	r24, 0x08	; 8
 366:	90 e0       	ldi	r25, 0x00	; 0
	The data frame is of total 40 bits long, it contains 5 segments and each segment
	is 8-bit long. We check each bit if it is high or low
	*/
	for (int q=0; q<8; q++)
	{
		while((PIND & (1<<DHT11_PIN)) == 0);/* check received bit 0 or 1, if pulled up */
 368:	86 9b       	sbis	0x10, 6	; 16
 36a:	fe cf       	rjmp	.-4      	; 0x368 <Receive_data+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36c:	23 e9       	ldi	r18, 0x93	; 147
 36e:	2a 95       	dec	r18
 370:	f1 f7       	brne	.-4      	; 0x36e <Receive_data+0xa>
 372:	00 c0       	rjmp	.+0      	; 0x374 <Receive_data+0x10>
		_delay_us(60);
		if(PIND & (1<<DHT11_PIN))				/* if high pulse is greater than 30ms */
 374:	86 9b       	sbis	0x10, 6	; 16
 376:	07 c0       	rjmp	.+14     	; 0x386 <Receive_data+0x22>
		c = (c<<1)|(0x01);						/* then it is logic HIGH */
 378:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <c>
 37c:	22 0f       	add	r18, r18
 37e:	21 60       	ori	r18, 0x01	; 1
 380:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <c>
 384:	05 c0       	rjmp	.+10     	; 0x390 <Receive_data+0x2c>
		else									/* otherwise it is logic LOW */
		c = (c<<1);
 386:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <c>
 38a:	22 0f       	add	r18, r18
 38c:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <c>
		while(PIND & (1<<DHT11_PIN));
 390:	86 99       	sbic	0x10, 6	; 16
 392:	fe cf       	rjmp	.-4      	; 0x390 <Receive_data+0x2c>
 394:	01 97       	sbiw	r24, 0x01	; 1
{	
	/*
	The data frame is of total 40 bits long, it contains 5 segments and each segment
	is 8-bit long. We check each bit if it is high or low
	*/
	for (int q=0; q<8; q++)
 396:	41 f7       	brne	.-48     	; 0x368 <Receive_data+0x4>
		else									/* otherwise it is logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
 398:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <c>
 39c:	08 95       	ret

0000039e <printYL69>:

void printYL69(){
	lcd_clear();
 39e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clear>
	lcd_print("NO DATA FOR YOU!");
 3a2:	8e e8       	ldi	r24, 0x8E	; 142
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
 3aa:	08 95       	ret

000003ac <main>:
}

int main(void)
{
	DDRD = _BV(4);
 3ac:	80 e1       	ldi	r24, 0x10	; 16
 3ae:	81 bb       	out	0x11, r24	; 17
	// DDRA = _BV(7); // buzzer
	PORTA = 0x80;
 3b0:	80 e8       	ldi	r24, 0x80	; 128
 3b2:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0x00;
 3b4:	17 ba       	out	0x17, r1	; 23
	PORTB = _BV(0) | _BV(1);
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	88 bb       	out	0x18, r24	; 24
	
	
	TCCR1A = _BV(COM1B1) | _BV(WGM10);
 3ba:	81 e2       	ldi	r24, 0x21	; 33
 3bc:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12) | _BV(CS11);
 3be:	8a e0       	ldi	r24, 0x0A	; 10
 3c0:	8e bd       	out	0x2e, r24	; 46
	OCR1B = 24;
 3c2:	88 e1       	ldi	r24, 0x18	; 24
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	99 bd       	out	0x29, r25	; 41
 3c8:	88 bd       	out	0x28, r24	; 40

	lcdinit();
 3ca:	0e 94 91 00 	call	0x122	; 0x122 <lcdinit>
	lcd_clear();
 3ce:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clear>

	ADMUX = _BV(REFS0);
 3d2:	80 e4       	ldi	r24, 0x40	; 64
 3d4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1);
 3d6:	86 e8       	ldi	r24, 0x86	; 134
 3d8:	86 b9       	out	0x06, r24	; 6
		
		
		if (bit_is_clear(PINB, 0)){
			view--;
			if (view < 0){
				view = MAXVIEW;
 3da:	c2 e0       	ldi	r28, 0x02	; 2
 3dc:	d0 e0       	ldi	r29, 0x00	; 0
			PORTA ^= 0x80;
		}*/
		
		
		
		if (bit_is_clear(PINB, 0)){
 3de:	b0 99       	sbic	0x16, 0	; 22
 3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <main+0x4c>
			view--;
 3e2:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
 3e6:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__data_end+0x1>
 3ea:	01 97       	sbiw	r24, 0x01	; 1
			if (view < 0){
 3ec:	ca f4       	brpl	.+50     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
				view = MAXVIEW;
 3ee:	d0 93 a5 00 	sts	0x00A5, r29	; 0x8000a5 <__data_end+0x1>
 3f2:	c0 93 a4 00 	sts	0x00A4, r28	; 0x8000a4 <__data_end>
 3f6:	4b c0       	rjmp	.+150    	; 0x48e <__stack+0x2f>
			}
		} else if (bit_is_clear(PINB, 1)){
 3f8:	b1 99       	sbic	0x16, 1	; 22
 3fa:	16 c0       	rjmp	.+44     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			view++;
 3fc:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
 400:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__data_end+0x1>
 404:	01 96       	adiw	r24, 0x01	; 1
			if (view > MAXVIEW){
 406:	83 30       	cpi	r24, 0x03	; 3
 408:	91 05       	cpc	r25, r1
 40a:	2c f4       	brge	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			view--;
			if (view < 0){
				view = MAXVIEW;
			}
		} else if (bit_is_clear(PINB, 1)){
			view++;
 40c:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__data_end+0x1>
 410:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
 414:	09 c0       	rjmp	.+18     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			if (view > MAXVIEW){
				view = 0;
 416:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__data_end+0x1>
 41a:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end>
 41e:	10 c0       	rjmp	.+32     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		}*/
		
		
		
		if (bit_is_clear(PINB, 0)){
			view--;
 420:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__data_end+0x1>
 424:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
			if (view > MAXVIEW){
				view = 0;
			}
		}
		
		switch (view) {
 428:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
 42c:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__data_end+0x1>
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	91 05       	cpc	r25, r1
 434:	69 f0       	breq	.+26     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 436:	82 30       	cpi	r24, 0x02	; 2
 438:	91 05       	cpc	r25, r1
 43a:	49 f1       	breq	.+82     	; 0x48e <__stack+0x2f>
 43c:	89 2b       	or	r24, r25
 43e:	49 f5       	brne	.+82     	; 0x492 <__stack+0x33>
			case 0:
				ADCSRA |= _BV(ADSC);
 440:	36 9a       	sbi	0x06, 6	; 6
				while (!(ADCSRA & _BV(ADIF)));
 442:	34 9b       	sbis	0x06, 4	; 6
 444:	fe cf       	rjmp	.-4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				printADC(ADC);
 446:	84 b1       	in	r24, 0x04	; 4
 448:	95 b1       	in	r25, 0x05	; 5
 44a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <printADC>
				break;
 44e:	21 c0       	rjmp	.+66     	; 0x492 <__stack+0x33>
			case 1:
				Request();
 450:	0e 94 a0 01 	call	0x340	; 0x340 <Request>
				Response();
 454:	0e 94 aa 01 	call	0x354	; 0x354 <Response>
				I_RH     = Receive_data();
 458:	0e 94 b2 01 	call	0x364	; 0x364 <Receive_data>
 45c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <I_RH>
				D_RH     = Receive_data();
 460:	0e 94 b2 01 	call	0x364	; 0x364 <Receive_data>
 464:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <D_RH>
				I_Temp   = Receive_data();
 468:	0e 94 b2 01 	call	0x364	; 0x364 <Receive_data>
 46c:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <I_Temp>
				D_Temp   = Receive_data();
 470:	0e 94 b2 01 	call	0x364	; 0x364 <Receive_data>
 474:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <D_Temp>
				CheckSum = Receive_data();
 478:	0e 94 b2 01 	call	0x364	; 0x364 <Receive_data>
 47c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <CheckSum>
				printDHT();
 480:	0e 94 31 01 	call	0x262	; 0x262 <printDHT>
				lcd_print("out");
 484:	8f e9       	ldi	r24, 0x9F	; 159
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
				break;
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__stack+0x33>
			case 2:
				printYL69();
 48e:	0e 94 cf 01 	call	0x39e	; 0x39e <printYL69>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 492:	2f ef       	ldi	r18, 0xFF	; 255
 494:	8f e7       	ldi	r24, 0x7F	; 127
 496:	96 e1       	ldi	r25, 0x16	; 22
 498:	21 50       	subi	r18, 0x01	; 1
 49a:	80 40       	sbci	r24, 0x00	; 0
 49c:	90 40       	sbci	r25, 0x00	; 0
 49e:	e1 f7       	brne	.-8      	; 0x498 <__stack+0x39>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__stack+0x43>
 4a2:	00 00       	nop
 4a4:	9c cf       	rjmp	.-200    	; 0x3de <main+0x32>

000004a6 <__floatunsisf>:
 4a6:	e8 94       	clt
 4a8:	09 c0       	rjmp	.+18     	; 0x4bc <__floatsisf+0x12>

000004aa <__floatsisf>:
 4aa:	97 fb       	bst	r25, 7
 4ac:	3e f4       	brtc	.+14     	; 0x4bc <__floatsisf+0x12>
 4ae:	90 95       	com	r25
 4b0:	80 95       	com	r24
 4b2:	70 95       	com	r23
 4b4:	61 95       	neg	r22
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255
 4b8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ba:	9f 4f       	sbci	r25, 0xFF	; 255
 4bc:	99 23       	and	r25, r25
 4be:	a9 f0       	breq	.+42     	; 0x4ea <__floatsisf+0x40>
 4c0:	f9 2f       	mov	r31, r25
 4c2:	96 e9       	ldi	r25, 0x96	; 150
 4c4:	bb 27       	eor	r27, r27
 4c6:	93 95       	inc	r25
 4c8:	f6 95       	lsr	r31
 4ca:	87 95       	ror	r24
 4cc:	77 95       	ror	r23
 4ce:	67 95       	ror	r22
 4d0:	b7 95       	ror	r27
 4d2:	f1 11       	cpse	r31, r1
 4d4:	f8 cf       	rjmp	.-16     	; 0x4c6 <__floatsisf+0x1c>
 4d6:	fa f4       	brpl	.+62     	; 0x516 <__floatsisf+0x6c>
 4d8:	bb 0f       	add	r27, r27
 4da:	11 f4       	brne	.+4      	; 0x4e0 <__floatsisf+0x36>
 4dc:	60 ff       	sbrs	r22, 0
 4de:	1b c0       	rjmp	.+54     	; 0x516 <__floatsisf+0x6c>
 4e0:	6f 5f       	subi	r22, 0xFF	; 255
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	8f 4f       	sbci	r24, 0xFF	; 255
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
 4e8:	16 c0       	rjmp	.+44     	; 0x516 <__floatsisf+0x6c>
 4ea:	88 23       	and	r24, r24
 4ec:	11 f0       	breq	.+4      	; 0x4f2 <__floatsisf+0x48>
 4ee:	96 e9       	ldi	r25, 0x96	; 150
 4f0:	11 c0       	rjmp	.+34     	; 0x514 <__floatsisf+0x6a>
 4f2:	77 23       	and	r23, r23
 4f4:	21 f0       	breq	.+8      	; 0x4fe <__floatsisf+0x54>
 4f6:	9e e8       	ldi	r25, 0x8E	; 142
 4f8:	87 2f       	mov	r24, r23
 4fa:	76 2f       	mov	r23, r22
 4fc:	05 c0       	rjmp	.+10     	; 0x508 <__floatsisf+0x5e>
 4fe:	66 23       	and	r22, r22
 500:	71 f0       	breq	.+28     	; 0x51e <__floatsisf+0x74>
 502:	96 e8       	ldi	r25, 0x86	; 134
 504:	86 2f       	mov	r24, r22
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	2a f0       	brmi	.+10     	; 0x516 <__floatsisf+0x6c>
 50c:	9a 95       	dec	r25
 50e:	66 0f       	add	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	88 1f       	adc	r24, r24
 514:	da f7       	brpl	.-10     	; 0x50c <__floatsisf+0x62>
 516:	88 0f       	add	r24, r24
 518:	96 95       	lsr	r25
 51a:	87 95       	ror	r24
 51c:	97 f9       	bld	r25, 7
 51e:	08 95       	ret

00000520 <__umulhisi3>:
 520:	a2 9f       	mul	r26, r18
 522:	b0 01       	movw	r22, r0
 524:	b3 9f       	mul	r27, r19
 526:	c0 01       	movw	r24, r0
 528:	a3 9f       	mul	r26, r19
 52a:	70 0d       	add	r23, r0
 52c:	81 1d       	adc	r24, r1
 52e:	11 24       	eor	r1, r1
 530:	91 1d       	adc	r25, r1
 532:	b2 9f       	mul	r27, r18
 534:	70 0d       	add	r23, r0
 536:	81 1d       	adc	r24, r1
 538:	11 24       	eor	r1, r1
 53a:	91 1d       	adc	r25, r1
 53c:	08 95       	ret

0000053e <__itoa_ncheck>:
 53e:	bb 27       	eor	r27, r27
 540:	4a 30       	cpi	r20, 0x0A	; 10
 542:	31 f4       	brne	.+12     	; 0x550 <__itoa_ncheck+0x12>
 544:	99 23       	and	r25, r25
 546:	22 f4       	brpl	.+8      	; 0x550 <__itoa_ncheck+0x12>
 548:	bd e2       	ldi	r27, 0x2D	; 45
 54a:	90 95       	com	r25
 54c:	81 95       	neg	r24
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	0c 94 ab 02 	jmp	0x556	; 0x556 <__utoa_common>

00000554 <__utoa_ncheck>:
 554:	bb 27       	eor	r27, r27

00000556 <__utoa_common>:
 556:	fb 01       	movw	r30, r22
 558:	55 27       	eor	r21, r21
 55a:	aa 27       	eor	r26, r26
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	aa 1f       	adc	r26, r26
 562:	a4 17       	cp	r26, r20
 564:	10 f0       	brcs	.+4      	; 0x56a <__utoa_common+0x14>
 566:	a4 1b       	sub	r26, r20
 568:	83 95       	inc	r24
 56a:	50 51       	subi	r21, 0x10	; 16
 56c:	b9 f7       	brne	.-18     	; 0x55c <__utoa_common+0x6>
 56e:	a0 5d       	subi	r26, 0xD0	; 208
 570:	aa 33       	cpi	r26, 0x3A	; 58
 572:	08 f0       	brcs	.+2      	; 0x576 <__utoa_common+0x20>
 574:	a9 5d       	subi	r26, 0xD9	; 217
 576:	a1 93       	st	Z+, r26
 578:	00 97       	sbiw	r24, 0x00	; 0
 57a:	79 f7       	brne	.-34     	; 0x55a <__utoa_common+0x4>
 57c:	b1 11       	cpse	r27, r1
 57e:	b1 93       	st	Z+, r27
 580:	11 92       	st	Z+, r1
 582:	cb 01       	movw	r24, r22
 584:	0c 94 c4 02 	jmp	0x588	; 0x588 <strrev>

00000588 <strrev>:
 588:	dc 01       	movw	r26, r24
 58a:	fc 01       	movw	r30, r24
 58c:	67 2f       	mov	r22, r23
 58e:	71 91       	ld	r23, Z+
 590:	77 23       	and	r23, r23
 592:	e1 f7       	brne	.-8      	; 0x58c <strrev+0x4>
 594:	32 97       	sbiw	r30, 0x02	; 2
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <strrev+0x18>
 598:	7c 91       	ld	r23, X
 59a:	6d 93       	st	X+, r22
 59c:	70 83       	st	Z, r23
 59e:	62 91       	ld	r22, -Z
 5a0:	ae 17       	cp	r26, r30
 5a2:	bf 07       	cpc	r27, r31
 5a4:	c8 f3       	brcs	.-14     	; 0x598 <strrev+0x10>
 5a6:	08 95       	ret

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>
