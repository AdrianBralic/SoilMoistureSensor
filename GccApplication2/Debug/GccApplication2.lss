
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00000f02  00000f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  008000be  008000be  00000ff4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001024  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019f3  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad8  00000000  00000000  00002b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b8b  00000000  00000000  0000363b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  000041c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000567  00000000  00000000  00004470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be1  00000000  00000000  000049d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000055b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 19 02 	jmp	0x432	; 0x432 <__vector_1>
   8:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3b       	cpi	r26, 0xBE	; 190
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae eb       	ldi	r26, 0xBE	; 190
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3d       	cpi	r26, 0xDC	; 220
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a5 02 	call	0x54a	; 0x54a <main>
  8a:	0c 94 7f 07 	jmp	0xefe	; 0xefe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcdcommand>:
#include "lcd.h"

void lcdcommand(unsigned char cmnd)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd & 0xf0);		/* SEND COMMAND TO DATA PORT */
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT &= ~ (1<<LCD_RS);						/* RS = 0 FOR COMMAND */
  9e:	c2 98       	cbi	0x18, 2	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
  a0:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	32 e0       	ldi	r19, 0x02	; 2
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcdcommand+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcdcommand+0x18>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
  aa:	c3 98       	cbi	0x18, 3	; 24
  ac:	96 ef       	ldi	r25, 0xF6	; 246
  ae:	9a 95       	dec	r25
  b0:	f1 f7       	brne	.-4      	; 0xae <lcdcommand+0x1c>
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd << 4);		/* SEND COMMAND TO DATA PORT */
  b2:	28 b3       	in	r18, 0x18	; 24
  b4:	2f 70       	andi	r18, 0x0F	; 15
  b6:	30 e1       	ldi	r19, 0x10	; 16
  b8:	83 9f       	mul	r24, r19
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	82 2b       	or	r24, r18
  c0:	88 bb       	out	0x18, r24	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
  c2:	c3 9a       	sbi	0x18, 3	; 24
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcdcommand+0x34>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcdcommand+0x3a>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
  cc:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	86 e6       	ldi	r24, 0x66	; 102
  d0:	9e e0       	ldi	r25, 0x0E	; 14
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcdcommand+0x40>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <lcddata>:
	_delay_ms(2);									/* WAIT FOR MAKE ENABLE WIDE */
}

void lcddata(unsigned char data)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		/* SEND DATA TO DATA PORT */
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	9f 70       	andi	r25, 0x0F	; 15
  de:	28 2f       	mov	r18, r24
  e0:	20 7f       	andi	r18, 0xF0	; 240
  e2:	92 2b       	or	r25, r18
  e4:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_RS);						/* MAKE RS = 1 FOR DATA */
  e6:	c2 9a       	sbi	0x18, 2	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE */
  e8:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	32 e0       	ldi	r19, 0x02	; 2
  ec:	3a 95       	dec	r19
  ee:	f1 f7       	brne	.-4      	; 0xec <lcddata+0x12>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcddata+0x18>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
  f2:	c3 98       	cbi	0x18, 3	; 24
  f4:	96 ef       	ldi	r25, 0xF6	; 246
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcddata+0x1c>
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		/*  */
  fa:	28 b3       	in	r18, 0x18	; 24
  fc:	2f 70       	andi	r18, 0x0F	; 15
  fe:	30 e1       	ldi	r19, 0x10	; 16
 100:	83 9f       	mul	r24, r19
 102:	c0 01       	movw	r24, r0
 104:	11 24       	eor	r1, r1
 106:	82 2b       	or	r24, r18
 108:	88 bb       	out	0x18, r24	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE*/
 10a:	c3 9a       	sbi	0x18, 3	; 24
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <lcddata+0x34>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcddata+0x3a>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE*/
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE*/
 114:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	86 e6       	ldi	r24, 0x66	; 102
 118:	9e e0       	ldi	r25, 0x0E	; 14
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcddata+0x40>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <lcdinit>:
	_delay_ms(2);									/* WAIT FOR MAKE ENABLE WIDE*/
}

void lcdinit()
{
	LCD_DDDR = 0xFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 bb       	out	0x17, r24	; 23
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	8f e7       	ldi	r24, 0x7F	; 127
 12a:	94 e0       	ldi	r25, 0x04	; 4
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <lcdinit+0xa>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcdinit+0x14>
 136:	00 00       	nop
	_delay_ms(200);									/* WAIT FOR SOME TIME */
	lcdcommand(0x33);
 138:	83 e3       	ldi	r24, 0x33	; 51
 13a:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
	lcdcommand(0x32);								/* SEND $32 FOR INIT OT 0X02 */
 13e:	82 e3       	ldi	r24, 0x32	; 50
 140:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
	lcdcommand(0x28);								/* INIT. LCD 2 LINE, 5 X 7 MATRIX */
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
	lcdcommand(0x0C);								/* DISPLAY ON CURSOR ON */
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
	lcdcommand(0x01);								/* LCD CLEAR */
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
 156:	86 e6       	ldi	r24, 0x66	; 102
 158:	9e e0       	ldi	r25, 0x0E	; 14
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcdinit+0x38>
 15e:	00 00       	nop
	_delay_ms(2);
	lcdcommand(0x82);								/* SHIFT CURSOR TO WRITE */
 160:	82 e8       	ldi	r24, 0x82	; 130
 162:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
 166:	08 95       	ret

00000168 <lcd_gotoxy>:
}

void lcd_gotoxy(unsigned char x, unsigned char y)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	00 d0       	rcall	.+0      	; 0x16e <lcd_gotoxy+0x6>
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharadd[]={0x80, 0xC0};
 172:	90 e8       	ldi	r25, 0x80	; 128
 174:	99 83       	std	Y+1, r25	; 0x01
 176:	90 ec       	ldi	r25, 0xC0	; 192
 178:	9a 83       	std	Y+2, r25	; 0x02
	lcdcommand(firstcharadd[y] + x);
 17a:	fe 01       	movw	r30, r28
 17c:	e6 0f       	add	r30, r22
 17e:	f1 1d       	adc	r31, r1
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	89 0f       	add	r24, r25
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
}
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <lcd_print>:

void lcd_print(char *str)
{
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while (str[i] |= 0)
 19a:	80 81       	ld	r24, Z
 19c:	88 23       	and	r24, r24
 19e:	59 f0       	breq	.+22     	; 0x1b6 <lcd_print+0x24>
 1a0:	8f 01       	movw	r16, r30
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcddata(str[i]);
 1a4:	0e 94 6d 00 	call	0xda	; 0xda <lcddata>
		i++;
 1a8:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 1aa:	f8 01       	movw	r30, r16
 1ac:	ec 0f       	add	r30, r28
 1ae:	f1 1d       	adc	r31, r1
 1b0:	80 81       	ld	r24, Z
 1b2:	81 11       	cpse	r24, r1
 1b4:	f7 cf       	rjmp	.-18     	; 0x1a4 <lcd_print+0x12>
	{
		lcddata(str[i]);
		i++;
	}
}
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	08 95       	ret

000001be <lcd_clear>:

void lcd_clear()
{
	lcdcommand(0x01);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 49 00 	call	0x92	; 0x92 <lcdcommand>
 1c4:	86 e6       	ldi	r24, 0x66	; 102
 1c6:	9e e0       	ldi	r25, 0x0E	; 14
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_clear+0xa>
 1cc:	00 00       	nop
 1ce:	08 95       	ret

000001d0 <printADC>:
int humFlag = 0;

#define DHT11_PIN PIN6
uint8_t c = 0, I_RH, D_RH, I_Temp, D_Temp, CheckSum;

void printADC(char *label, int value) {
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	60 97       	sbiw	r28, 0x10	; 16
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	8c 01       	movw	r16, r24
 1ea:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1ec:	4a e0       	ldi	r20, 0x0A	; 10
 1ee:	be 01       	movw	r22, r28
 1f0:	6f 5f       	subi	r22, 0xFF	; 255
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	0e 94 4a 07 	call	0xe94	; 0xe94 <__itoa_ncheck>
	char adcStr[16];
	itoa(value, adcStr, 10);
	lcd_print(label);
 1f8:	c8 01       	movw	r24, r16
 1fa:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
	lcd_print(adcStr);
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
	lcd_print("%");
 206:	82 e6       	ldi	r24, 0x62	; 98
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
}
 20e:	60 96       	adiw	r28, 0x10	; 16
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	08 95       	ret

00000224 <printLight>:

void printLight() {
	lcd_clear();
 224:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clear>
	printADC("Light = ", lightPerc);
 228:	60 91 d3 00 	lds	r22, 0x00D3	; 0x8000d3 <lightPerc>
 22c:	70 91 d4 00 	lds	r23, 0x00D4	; 0x8000d4 <lightPerc+0x1>
 230:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <lightPerc+0x2>
 234:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <lightPerc+0x3>
 238:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fixsfsi>
 23c:	84 e6       	ldi	r24, 0x64	; 100
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <printADC>
	lcd_gotoxy(0, 1);
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	if (!nightMode) {
 24c:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <nightMode>
 250:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <nightMode+0x1>
 254:	89 2b       	or	r24, r25
 256:	29 f4       	brne	.+10     	; 0x262 <printLight+0x3e>
		lcd_print("Day mode");
 258:	8d e6       	ldi	r24, 0x6D	; 109
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
 260:	08 95       	ret
	} else {
		lcd_print("Night mode");
 262:	86 e7       	ldi	r24, 0x76	; 118
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
 26a:	08 95       	ret

0000026c <printMoisture>:
	}
}

void printMoisture() {
	lcd_clear();
 26c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clear>
	printADC("Moisture1 = ", moistPerc1);
 270:	60 91 cb 00 	lds	r22, 0x00CB	; 0x8000cb <moistPerc1>
 274:	70 91 cc 00 	lds	r23, 0x00CC	; 0x8000cc <moistPerc1+0x1>
 278:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <moistPerc1+0x2>
 27c:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <moistPerc1+0x3>
 280:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fixsfsi>
 284:	81 e8       	ldi	r24, 0x81	; 129
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <printADC>
	lcd_gotoxy(0, 1);
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	printADC("Moisture2 = ", moistPerc2);
 294:	60 91 c7 00 	lds	r22, 0x00C7	; 0x8000c7 <moistPerc2>
 298:	70 91 c8 00 	lds	r23, 0x00C8	; 0x8000c8 <moistPerc2+0x1>
 29c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <moistPerc2+0x2>
 2a0:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <moistPerc2+0x3>
 2a4:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fixsfsi>
 2a8:	8e e8       	ldi	r24, 0x8E	; 142
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <printADC>
 2b0:	08 95       	ret

000002b2 <Request>:
}

void Request() {
	DDRD |= (1<<DHT11_PIN); 
 2b2:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1<<DHT11_PIN);		
 2b4:	96 98       	cbi	0x12, 6	; 18
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	9f e8       	ldi	r25, 0x8F	; 143
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <Request+0x8>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <Request+0xe>
 2c0:	00 00       	nop
	_delay_ms(20);					
	PORTD |= (1<<DHT11_PIN);		
 2c2:	96 9a       	sbi	0x12, 6	; 18
 2c4:	08 95       	ret

000002c6 <Response>:
}

void Response()	{
	DDRD &= ~(1<<DHT11_PIN);
 2c6:	8e 98       	cbi	0x11, 6	; 17
	while(PIND & (1<<DHT11_PIN)); 
 2c8:	86 99       	sbic	0x10, 6	; 16
 2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <Response+0x2>
	while((PIND & (1<<DHT11_PIN))==0);
 2cc:	86 9b       	sbis	0x10, 6	; 16
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <Response+0x6>
	while(PIND & (1<<DHT11_PIN));
 2d0:	86 99       	sbic	0x10, 6	; 16
 2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <Response+0xa>
}
 2d4:	08 95       	ret

000002d6 <Receive_data>:

uint8_t Receive_data() {	
 2d6:	88 e0       	ldi	r24, 0x08	; 8
 2d8:	90 e0       	ldi	r25, 0x00	; 0
	for (int q=0; q<8; q++) {
		while((PIND & (1<<DHT11_PIN)) == 0);
 2da:	86 9b       	sbis	0x10, 6	; 16
 2dc:	fe cf       	rjmp	.-4      	; 0x2da <Receive_data+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	23 e9       	ldi	r18, 0x93	; 147
 2e0:	2a 95       	dec	r18
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <Receive_data+0xa>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <Receive_data+0x10>
		_delay_us(60);
		if(PIND & (1<<DHT11_PIN))				
 2e6:	86 9b       	sbis	0x10, 6	; 16
 2e8:	07 c0       	rjmp	.+14     	; 0x2f8 <Receive_data+0x22>
		c = (c<<1)|(0x01);						
 2ea:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <__data_end>
 2ee:	22 0f       	add	r18, r18
 2f0:	21 60       	ori	r18, 0x01	; 1
 2f2:	20 93 be 00 	sts	0x00BE, r18	; 0x8000be <__data_end>
 2f6:	05 c0       	rjmp	.+10     	; 0x302 <Receive_data+0x2c>
		else									
		c = (c<<1);
 2f8:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <__data_end>
 2fc:	22 0f       	add	r18, r18
 2fe:	20 93 be 00 	sts	0x00BE, r18	; 0x8000be <__data_end>
		while(PIND & (1<<DHT11_PIN));
 302:	86 99       	sbic	0x10, 6	; 16
 304:	fe cf       	rjmp	.-4      	; 0x302 <Receive_data+0x2c>
 306:	01 97       	sbiw	r24, 0x01	; 1
	while((PIND & (1<<DHT11_PIN))==0);
	while(PIND & (1<<DHT11_PIN));
}

uint8_t Receive_data() {	
	for (int q=0; q<8; q++) {
 308:	41 f7       	brne	.-48     	; 0x2da <Receive_data+0x4>
		else									
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
 30a:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <__data_end>
 30e:	08 95       	ret

00000310 <printDHT>:

void printDHT() {
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	00 d0       	rcall	.+0      	; 0x316 <printDHT+0x6>
 316:	00 d0       	rcall	.+0      	; 0x318 <printDHT+0x8>
 318:	1f 92       	push	r1
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
	lcd_clear();
 31e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clear>
	
	if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum) {
 322:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <I_RH>
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <D_RH>
 32c:	ac 01       	movw	r20, r24
 32e:	42 0f       	add	r20, r18
 330:	51 1d       	adc	r21, r1
 332:	9a 01       	movw	r18, r20
 334:	40 91 d9 00 	lds	r20, 0x00D9	; 0x8000d9 <I_Temp>
 338:	24 0f       	add	r18, r20
 33a:	31 1d       	adc	r19, r1
 33c:	40 91 db 00 	lds	r20, 0x00DB	; 0x8000db <D_Temp>
 340:	24 0f       	add	r18, r20
 342:	31 1d       	adc	r19, r1
 344:	40 91 d8 00 	lds	r20, 0x00D8	; 0x8000d8 <CheckSum>
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	24 17       	cp	r18, r20
 34c:	35 07       	cpc	r19, r21
 34e:	29 f0       	breq	.+10     	; 0x35a <printDHT+0x4a>
		lcd_print("DHT Error");
 350:	8b e9       	ldi	r24, 0x9B	; 155
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
 358:	50 c0       	rjmp	.+160    	; 0x3fa <printDHT+0xea>
 35a:	4a e0       	ldi	r20, 0x0A	; 10
 35c:	be 01       	movw	r22, r28
 35e:	6f 5f       	subi	r22, 0xFF	; 255
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	0e 94 4a 07 	call	0xe94	; 0xe94 <__itoa_ncheck>
	}

	char DHTdata[5];
	
	itoa(I_RH, DHTdata, 10);
	lcd_print("Humidity = ");
 366:	85 ea       	ldi	r24, 0xA5	; 165
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
	lcd_print(DHTdata);
 36e:	ce 01       	movw	r24, r28
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
	lcd_print(".");
 376:	81 eb       	ldi	r24, 0xB1	; 177
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
 37e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <D_RH>
 382:	4a e0       	ldi	r20, 0x0A	; 10
 384:	be 01       	movw	r22, r28
 386:	6f 5f       	subi	r22, 0xFF	; 255
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 4a 07 	call	0xe94	; 0xe94 <__itoa_ncheck>
	
	itoa(D_RH, DHTdata, 10);
	lcd_print(DHTdata);
 390:	ce 01       	movw	r24, r28
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
	lcd_print("%");
 398:	82 e6       	ldi	r24, 0x62	; 98
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
 3a0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <I_Temp>
 3a4:	4a e0       	ldi	r20, 0x0A	; 10
 3a6:	be 01       	movw	r22, r28
 3a8:	6f 5f       	subi	r22, 0xFF	; 255
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 4a 07 	call	0xe94	; 0xe94 <__itoa_ncheck>

	itoa(I_Temp, DHTdata, 10);
	lcd_gotoxy(0,1);
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_print("Temp = ");
 3ba:	83 eb       	ldi	r24, 0xB3	; 179
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
	lcd_print(DHTdata);
 3c2:	ce 01       	movw	r24, r28
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
	lcd_print(".");
 3ca:	81 eb       	ldi	r24, 0xB1	; 177
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
 3d2:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <D_Temp>
 3d6:	4a e0       	ldi	r20, 0x0A	; 10
 3d8:	be 01       	movw	r22, r28
 3da:	6f 5f       	subi	r22, 0xFF	; 255
 3dc:	7f 4f       	sbci	r23, 0xFF	; 255
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 4a 07 	call	0xe94	; 0xe94 <__itoa_ncheck>
	
	itoa(D_Temp, DHTdata, 10);
	lcd_print(DHTdata);
 3e4:	ce 01       	movw	r24, r28
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
	lcddata(0xDF);
 3ec:	8f ed       	ldi	r24, 0xDF	; 223
 3ee:	0e 94 6d 00 	call	0xda	; 0xda <lcddata>
	lcd_print("C");	
 3f2:	8b eb       	ldi	r24, 0xBB	; 187
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print>
}
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <nonBlockingDebounce>:

void nonBlockingDebounce() {
	GICR &= ~_BV(INT0);
 40a:	8b b7       	in	r24, 0x3b	; 59
 40c:	8f 7b       	andi	r24, 0xBF	; 191
 40e:	8b bf       	out	0x3b, r24	; 59
	sei();
 410:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 412:	2f ef       	ldi	r18, 0xFF	; 255
 414:	8f e9       	ldi	r24, 0x9F	; 159
 416:	95 e0       	ldi	r25, 0x05	; 5
 418:	21 50       	subi	r18, 0x01	; 1
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <nonBlockingDebounce+0xe>
 420:	00 c0       	rjmp	.+0      	; 0x422 <nonBlockingDebounce+0x18>
 422:	00 00       	nop

	_delay_ms(250);
	GIFR = _BV(INTF0);
 424:	80 e4       	ldi	r24, 0x40	; 64
 426:	8a bf       	out	0x3a, r24	; 58
	GICR |= _BV(INT0);
 428:	8b b7       	in	r24, 0x3b	; 59
 42a:	80 64       	ori	r24, 0x40	; 64
 42c:	8b bf       	out	0x3b, r24	; 59
	
	cli();
 42e:	f8 94       	cli
 430:	08 95       	ret

00000432 <__vector_1>:
}

/*	Change LCD display view on INT0	*/
ISR(INT0_vect) {
 432:	1f 92       	push	r1
 434:	0f 92       	push	r0
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	0f 92       	push	r0
 43a:	11 24       	eor	r1, r1
 43c:	2f 93       	push	r18
 43e:	3f 93       	push	r19
 440:	4f 93       	push	r20
 442:	5f 93       	push	r21
 444:	6f 93       	push	r22
 446:	7f 93       	push	r23
 448:	8f 93       	push	r24
 44a:	9f 93       	push	r25
 44c:	af 93       	push	r26
 44e:	bf 93       	push	r27
 450:	ef 93       	push	r30
 452:	ff 93       	push	r31
	view = (view + 1) % MAXVIEW;
 454:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 458:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	63 e0       	ldi	r22, 0x03	; 3
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	0e 94 22 07 	call	0xe44	; 0xe44 <__divmodhi4>
 466:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 46a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	nonBlockingDebounce();
 46e:	0e 94 05 02 	call	0x40a	; 0x40a <nonBlockingDebounce>
}
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <__vector_2>:

/*
	Toggle day-mode/night-mode on INT1
	Night-mode ignores light threshold
*/
ISR(INT1_vect) {
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
 49e:	2f 93       	push	r18
 4a0:	3f 93       	push	r19
 4a2:	4f 93       	push	r20
 4a4:	5f 93       	push	r21
 4a6:	6f 93       	push	r22
 4a8:	7f 93       	push	r23
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	af 93       	push	r26
 4b0:	bf 93       	push	r27
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
	nightMode = nightMode ? 0 : 1;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <nightMode>
 4be:	30 91 d0 00 	lds	r19, 0x00D0	; 0x8000d0 <nightMode+0x1>
 4c2:	23 2b       	or	r18, r19
 4c4:	11 f0       	breq	.+4      	; 0x4ca <__vector_2+0x36>
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <nightMode+0x1>
 4ce:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <nightMode>
	nonBlockingDebounce();
 4d2:	0e 94 05 02 	call	0x40a	; 0x40a <nonBlockingDebounce>
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <beeper>:

/*	Signalize unfavorable conditions	*/
void beeper(){
	if (lightFlag)
 4f8:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <lightFlag>
 4fc:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <lightFlag+0x1>
 500:	89 2b       	or	r24, r25
 502:	11 f0       	breq	.+4      	; 0x508 <beeper+0x10>
		morse_L();
 504:	0e 94 66 04 	call	0x8cc	; 0x8cc <morse_L>
	if (tempFlag)
 508:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <tempFlag>
 50c:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <tempFlag+0x1>
 510:	89 2b       	or	r24, r25
 512:	11 f0       	breq	.+4      	; 0x518 <beeper+0x20>
		morse_T();
 514:	0e 94 80 04 	call	0x900	; 0x900 <morse_T>
	if (humFlag)
 518:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <humFlag>
 51c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <humFlag+0x1>
 520:	89 2b       	or	r24, r25
 522:	11 f0       	breq	.+4      	; 0x528 <beeper+0x30>
		morse_H();
 524:	0e 94 8e 04 	call	0x91c	; 0x91c <morse_H>
	if (moistFlag1)
 528:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <moistFlag1>
 52c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <moistFlag1+0x1>
 530:	89 2b       	or	r24, r25
 532:	11 f0       	breq	.+4      	; 0x538 <beeper+0x40>
		morse_1();
 534:	0e 94 a8 04 	call	0x950	; 0x950 <morse_1>
	if(moistFlag2)
 538:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <moistFlag2>
 53c:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <moistFlag2+0x1>
 540:	89 2b       	or	r24, r25
 542:	11 f0       	breq	.+4      	; 0x548 <beeper+0x50>
		morse_2();
 544:	0e 94 c6 04 	call	0x98c	; 0x98c <morse_2>
 548:	08 95       	ret

0000054a <main>:
}

int main(void)
{	
	/*	INIT SIGNALIZATION	*/
	morse_init();
 54a:	0e 94 44 04 	call	0x888	; 0x888 <morse_init>
	
	/*	INIT LCD	*/
	DDRD = _BV(4);
 54e:	80 e1       	ldi	r24, 0x10	; 16
 550:	81 bb       	out	0x11, r24	; 17
	TCCR1A = _BV(COM1B1) | _BV(WGM10);
 552:	81 e2       	ldi	r24, 0x21	; 33
 554:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12) | _BV(CS11);
 556:	ca e0       	ldi	r28, 0x0A	; 10
 558:	ce bd       	out	0x2e, r28	; 46
	lcdinit();
 55a:	0e 94 91 00 	call	0x122	; 0x122 <lcdinit>
	lcd_clear();
 55e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clear>
	
	/*	INIT INTERRUPTS	*/
	MCUCR = _BV(ISC01) | _BV(ISC11);
 562:	c5 bf       	out	0x35, r28	; 53
	GICR = _BV(INT1) | _BV(INT0);
 564:	80 ec       	ldi	r24, 0xC0	; 192
 566:	8b bf       	out	0x3b, r24	; 59
	sei();
 568:	78 94       	sei

	/*	INIT ADC	*/
	ADMUX = _BV(REFS0) | _BV(MUX0);
 56a:	81 e4       	ldi	r24, 0x41	; 65
 56c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
 56e:	87 e8       	ldi	r24, 0x87	; 135
 570:	86 b9       	out	0x06, r24	; 6

	int DHT_delay = 0;
 572:	c1 2c       	mov	r12, r1
 574:	d1 2c       	mov	r13, r1
	
	while (1) {
		
		/*	Read from CH0 (photo-resistor)	*/
		ADMUX ^= _BV(MUX0);
 576:	11 e0       	ldi	r17, 0x01	; 1
		ADCSRA ^= _BV(ADPS0);
		ADCSRA |= _BV(ADSC);
		while (!(ADCSRA & _BV(ADIF)));
		lightPerc = (1023 - ADC) * 100.00 / 1023.00;
 578:	0f 2e       	mov	r0, r31
 57a:	aa 24       	eor	r10, r10
 57c:	aa 94       	dec	r10
 57e:	f3 e0       	ldi	r31, 0x03	; 3
 580:	bf 2e       	mov	r11, r31
 582:	f0 2d       	mov	r31, r0
		int lightBuffer = lightFlag ? THRESHOLD : 0;
 584:	31 2c       	mov	r3, r1
 586:	21 2c       	mov	r2, r1
		if (nightMode) {
			lightFlag = (lightPerc > (LIGHT_MAX_PERC - lightBuffer)) ? 1 : 0;
		} else {
			lightFlag = (lightPerc < (LIGHT_MIN_PERC + lightBuffer) || lightPerc > (LIGHT_MAX_PERC - lightBuffer)) ? 1 : 0;
 588:	ff 24       	eor	r15, r15
 58a:	f3 94       	inc	r15
 58c:	00 e0       	ldi	r16, 0x00	; 0
 58e:	0f 2e       	mov	r0, r31
 590:	fa e5       	ldi	r31, 0x5A	; 90
 592:	8f 2e       	mov	r8, r31
 594:	91 2c       	mov	r9, r1
 596:	f0 2d       	mov	r31, r0
		while (!(ADCSRA & _BV(ADIF)));
		ADCSRA |= _BV(ADIF);
		moistPerc1 = 100 - (ADC * 100.00) / 1023.00;
		moistFlag1 = (moistPerc1 < MOIST_MIN_PERC || moistPerc1 > MOIST_MAX_PERC) ? 1 : 0;
		
		ADMUX ^= _BV(MUX0) | _BV(MUX1);
 598:	0f 2e       	mov	r0, r31
 59a:	f3 e0       	ldi	r31, 0x03	; 3
 59c:	ef 2e       	mov	r14, r31
 59e:	f0 2d       	mov	r31, r0
	int DHT_delay = 0;
	
	while (1) {
		
		/*	Read from CH0 (photo-resistor)	*/
		ADMUX ^= _BV(MUX0);
 5a0:	87 b1       	in	r24, 0x07	; 7
 5a2:	81 27       	eor	r24, r17
 5a4:	87 b9       	out	0x07, r24	; 7
		ADCSRA ^= _BV(ADPS0);
 5a6:	86 b1       	in	r24, 0x06	; 6
 5a8:	81 27       	eor	r24, r17
 5aa:	86 b9       	out	0x06, r24	; 6
		ADCSRA |= _BV(ADSC);
 5ac:	36 9a       	sbi	0x06, 6	; 6
		while (!(ADCSRA & _BV(ADIF)));
 5ae:	34 9b       	sbis	0x06, 4	; 6
 5b0:	fe cf       	rjmp	.-4      	; 0x5ae <main+0x64>
		lightPerc = (1023 - ADC) * 100.00 / 1023.00;
 5b2:	84 b1       	in	r24, 0x04	; 4
 5b4:	95 b1       	in	r25, 0x05	; 5
 5b6:	b5 01       	movw	r22, r10
 5b8:	68 1b       	sub	r22, r24
 5ba:	79 0b       	sbc	r23, r25
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__floatunsisf>
 5c4:	20 e0       	ldi	r18, 0x00	; 0
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	48 ec       	ldi	r20, 0xC8	; 200
 5ca:	52 e4       	ldi	r21, 0x42	; 66
 5cc:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3>
 5d0:	20 e0       	ldi	r18, 0x00	; 0
 5d2:	30 ec       	ldi	r19, 0xC0	; 192
 5d4:	4f e7       	ldi	r20, 0x7F	; 127
 5d6:	54 e4       	ldi	r21, 0x44	; 68
 5d8:	0e 94 56 05 	call	0xaac	; 0xaac <__divsf3>
 5dc:	2b 01       	movw	r4, r22
 5de:	3c 01       	movw	r6, r24
 5e0:	60 93 d3 00 	sts	0x00D3, r22	; 0x8000d3 <lightPerc>
 5e4:	70 93 d4 00 	sts	0x00D4, r23	; 0x8000d4 <lightPerc+0x1>
 5e8:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <lightPerc+0x2>
 5ec:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <lightPerc+0x3>
		int lightBuffer = lightFlag ? THRESHOLD : 0;
 5f0:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <lightFlag>
 5f4:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <lightFlag+0x1>
 5f8:	89 2b       	or	r24, r25
 5fa:	19 f4       	brne	.+6      	; 0x602 <main+0xb8>
 5fc:	c3 2d       	mov	r28, r3
 5fe:	d2 2d       	mov	r29, r2
 600:	04 c0       	rjmp	.+8      	; 0x60a <main+0xc0>
 602:	95 e0       	ldi	r25, 0x05	; 5
 604:	c9 2f       	mov	r28, r25
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	d2 2f       	mov	r29, r18
		if (nightMode) {
 60a:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <nightMode>
 60e:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <nightMode+0x1>
 612:	89 2b       	or	r24, r25
 614:	d1 f0       	breq	.+52     	; 0x64a <main+0x100>
			lightFlag = (lightPerc > (LIGHT_MAX_PERC - lightBuffer)) ? 1 : 0;
 616:	b4 01       	movw	r22, r8
 618:	6c 1b       	sub	r22, r28
 61a:	7d 0b       	sbc	r23, r29
 61c:	07 2e       	mov	r0, r23
 61e:	00 0c       	add	r0, r0
 620:	88 0b       	sbc	r24, r24
 622:	99 0b       	sbc	r25, r25
 624:	0e 94 00 06 	call	0xc00	; 0xc00 <__floatsisf>
 628:	9b 01       	movw	r18, r22
 62a:	ac 01       	movw	r20, r24
 62c:	df 2d       	mov	r29, r15
 62e:	c0 2f       	mov	r28, r16
 630:	c3 01       	movw	r24, r6
 632:	b2 01       	movw	r22, r4
 634:	0e 94 b0 06 	call	0xd60	; 0xd60 <__gesf2>
 638:	18 16       	cp	r1, r24
 63a:	14 f0       	brlt	.+4      	; 0x640 <main+0xf6>
 63c:	d3 2d       	mov	r29, r3
 63e:	c2 2d       	mov	r28, r2
 640:	d0 93 d1 00 	sts	0x00D1, r29	; 0x8000d1 <lightFlag>
 644:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <lightFlag+0x1>
 648:	2d c0       	rjmp	.+90     	; 0x6a4 <main+0x15a>
		} else {
			lightFlag = (lightPerc < (LIGHT_MIN_PERC + lightBuffer) || lightPerc > (LIGHT_MAX_PERC - lightBuffer)) ? 1 : 0;
 64a:	be 01       	movw	r22, r28
 64c:	61 5f       	subi	r22, 0xF1	; 241
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	07 2e       	mov	r0, r23
 652:	00 0c       	add	r0, r0
 654:	88 0b       	sbc	r24, r24
 656:	99 0b       	sbc	r25, r25
 658:	0e 94 00 06 	call	0xc00	; 0xc00 <__floatsisf>
 65c:	9b 01       	movw	r18, r22
 65e:	ac 01       	movw	r20, r24
 660:	c3 01       	movw	r24, r6
 662:	b2 01       	movw	r22, r4
 664:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__cmpsf2>
 668:	88 23       	and	r24, r24
 66a:	b4 f0       	brlt	.+44     	; 0x698 <main+0x14e>
 66c:	b4 01       	movw	r22, r8
 66e:	6c 1b       	sub	r22, r28
 670:	7d 0b       	sbc	r23, r29
 672:	07 2e       	mov	r0, r23
 674:	00 0c       	add	r0, r0
 676:	88 0b       	sbc	r24, r24
 678:	99 0b       	sbc	r25, r25
 67a:	0e 94 00 06 	call	0xc00	; 0xc00 <__floatsisf>
 67e:	9b 01       	movw	r18, r22
 680:	ac 01       	movw	r20, r24
 682:	cf 2d       	mov	r28, r15
 684:	d0 2f       	mov	r29, r16
 686:	c3 01       	movw	r24, r6
 688:	b2 01       	movw	r22, r4
 68a:	0e 94 b0 06 	call	0xd60	; 0xd60 <__gesf2>
 68e:	18 16       	cp	r1, r24
 690:	2c f0       	brlt	.+10     	; 0x69c <main+0x152>
 692:	c3 2d       	mov	r28, r3
 694:	d2 2d       	mov	r29, r2
 696:	02 c0       	rjmp	.+4      	; 0x69c <main+0x152>
 698:	cf 2d       	mov	r28, r15
 69a:	d0 2f       	mov	r29, r16
 69c:	c0 93 d1 00 	sts	0x00D1, r28	; 0x8000d1 <lightFlag>
 6a0:	d0 93 d2 00 	sts	0x00D2, r29	; 0x8000d2 <lightFlag+0x1>
		}
		
		/*	Read from CH1 (soil moisture)	*/
		ADMUX ^= _BV(MUX0);
 6a4:	87 b1       	in	r24, 0x07	; 7
 6a6:	81 27       	eor	r24, r17
 6a8:	87 b9       	out	0x07, r24	; 7
		ADCSRA ^= _BV(ADPS0);
 6aa:	86 b1       	in	r24, 0x06	; 6
 6ac:	81 27       	eor	r24, r17
 6ae:	86 b9       	out	0x06, r24	; 6
		ADCSRA |= _BV(ADSC);
 6b0:	36 9a       	sbi	0x06, 6	; 6
		while (!(ADCSRA & _BV(ADIF)));
 6b2:	34 9b       	sbis	0x06, 4	; 6
 6b4:	fe cf       	rjmp	.-4      	; 0x6b2 <main+0x168>
		ADCSRA |= _BV(ADIF);
 6b6:	34 9a       	sbi	0x06, 4	; 6
		moistPerc1 = 100 - (ADC * 100.00) / 1023.00;
 6b8:	64 b1       	in	r22, 0x04	; 4
 6ba:	75 b1       	in	r23, 0x05	; 5
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__floatunsisf>
 6c4:	20 e0       	ldi	r18, 0x00	; 0
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	48 ec       	ldi	r20, 0xC8	; 200
 6ca:	52 e4       	ldi	r21, 0x42	; 66
 6cc:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3>
 6d0:	20 e0       	ldi	r18, 0x00	; 0
 6d2:	30 ec       	ldi	r19, 0xC0	; 192
 6d4:	4f e7       	ldi	r20, 0x7F	; 127
 6d6:	54 e4       	ldi	r21, 0x44	; 68
 6d8:	0e 94 56 05 	call	0xaac	; 0xaac <__divsf3>
 6dc:	9b 01       	movw	r18, r22
 6de:	ac 01       	movw	r20, r24
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	88 ec       	ldi	r24, 0xC8	; 200
 6e6:	92 e4       	ldi	r25, 0x42	; 66
 6e8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__subsf3>
 6ec:	2b 01       	movw	r4, r22
 6ee:	3c 01       	movw	r6, r24
 6f0:	60 93 cb 00 	sts	0x00CB, r22	; 0x8000cb <moistPerc1>
 6f4:	70 93 cc 00 	sts	0x00CC, r23	; 0x8000cc <moistPerc1+0x1>
 6f8:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <moistPerc1+0x2>
 6fc:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <moistPerc1+0x3>
		moistFlag1 = (moistPerc1 < MOIST_MIN_PERC || moistPerc1 > MOIST_MAX_PERC) ? 1 : 0;
 700:	20 e0       	ldi	r18, 0x00	; 0
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	40 ea       	ldi	r20, 0xA0	; 160
 706:	51 e4       	ldi	r21, 0x41	; 65
 708:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__cmpsf2>
 70c:	88 23       	and	r24, r24
 70e:	7c f0       	brlt	.+30     	; 0x72e <main+0x1e4>
 710:	cf 2d       	mov	r28, r15
 712:	d0 2f       	mov	r29, r16
 714:	20 e0       	ldi	r18, 0x00	; 0
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	44 eb       	ldi	r20, 0xB4	; 180
 71a:	52 e4       	ldi	r21, 0x42	; 66
 71c:	c3 01       	movw	r24, r6
 71e:	b2 01       	movw	r22, r4
 720:	0e 94 b0 06 	call	0xd60	; 0xd60 <__gesf2>
 724:	18 16       	cp	r1, r24
 726:	2c f0       	brlt	.+10     	; 0x732 <main+0x1e8>
 728:	c3 2d       	mov	r28, r3
 72a:	d2 2d       	mov	r29, r2
 72c:	02 c0       	rjmp	.+4      	; 0x732 <main+0x1e8>
 72e:	cf 2d       	mov	r28, r15
 730:	d0 2f       	mov	r29, r16
 732:	c0 93 c5 00 	sts	0x00C5, r28	; 0x8000c5 <moistFlag1>
 736:	d0 93 c6 00 	sts	0x00C6, r29	; 0x8000c6 <moistFlag1+0x1>
		
		ADMUX ^= _BV(MUX0) | _BV(MUX1);
 73a:	87 b1       	in	r24, 0x07	; 7
 73c:	8e 25       	eor	r24, r14
 73e:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= _BV(ADSC);
 740:	36 9a       	sbi	0x06, 6	; 6
		while (!(ADCSRA & _BV(ADIF)));
 742:	34 9b       	sbis	0x06, 4	; 6
 744:	fe cf       	rjmp	.-4      	; 0x742 <main+0x1f8>
		ADCSRA |= _BV(ADIF);
 746:	34 9a       	sbi	0x06, 4	; 6
		moistPerc2 = 100 - (ADC * 100.00) / 1023.00;
 748:	64 b1       	in	r22, 0x04	; 4
 74a:	75 b1       	in	r23, 0x05	; 5
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__floatunsisf>
 754:	20 e0       	ldi	r18, 0x00	; 0
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	48 ec       	ldi	r20, 0xC8	; 200
 75a:	52 e4       	ldi	r21, 0x42	; 66
 75c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3>
 760:	20 e0       	ldi	r18, 0x00	; 0
 762:	30 ec       	ldi	r19, 0xC0	; 192
 764:	4f e7       	ldi	r20, 0x7F	; 127
 766:	54 e4       	ldi	r21, 0x44	; 68
 768:	0e 94 56 05 	call	0xaac	; 0xaac <__divsf3>
 76c:	9b 01       	movw	r18, r22
 76e:	ac 01       	movw	r20, r24
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	88 ec       	ldi	r24, 0xC8	; 200
 776:	92 e4       	ldi	r25, 0x42	; 66
 778:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__subsf3>
 77c:	2b 01       	movw	r4, r22
 77e:	3c 01       	movw	r6, r24
 780:	60 93 c7 00 	sts	0x00C7, r22	; 0x8000c7 <moistPerc2>
 784:	70 93 c8 00 	sts	0x00C8, r23	; 0x8000c8 <moistPerc2+0x1>
 788:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <moistPerc2+0x2>
 78c:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <moistPerc2+0x3>
		moistFlag2 = (moistPerc2 < MOIST_MIN_PERC || moistPerc2 > MOIST_MAX_PERC) ? 1 : 0;
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	40 ea       	ldi	r20, 0xA0	; 160
 796:	51 e4       	ldi	r21, 0x41	; 65
 798:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__cmpsf2>
 79c:	88 23       	and	r24, r24
 79e:	7c f0       	brlt	.+30     	; 0x7be <main+0x274>
 7a0:	cf 2d       	mov	r28, r15
 7a2:	d0 2f       	mov	r29, r16
 7a4:	20 e0       	ldi	r18, 0x00	; 0
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	44 eb       	ldi	r20, 0xB4	; 180
 7aa:	52 e4       	ldi	r21, 0x42	; 66
 7ac:	c3 01       	movw	r24, r6
 7ae:	b2 01       	movw	r22, r4
 7b0:	0e 94 b0 06 	call	0xd60	; 0xd60 <__gesf2>
 7b4:	18 16       	cp	r1, r24
 7b6:	2c f0       	brlt	.+10     	; 0x7c2 <main+0x278>
 7b8:	c3 2d       	mov	r28, r3
 7ba:	d2 2d       	mov	r29, r2
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <main+0x278>
 7be:	cf 2d       	mov	r28, r15
 7c0:	d0 2f       	mov	r29, r16
 7c2:	c0 93 c3 00 	sts	0x00C3, r28	; 0x8000c3 <moistFlag2>
 7c6:	d0 93 c4 00 	sts	0x00C4, r29	; 0x8000c4 <moistFlag2+0x1>
		ADMUX ^= _BV(MUX0) | _BV(MUX1);
 7ca:	87 b1       	in	r24, 0x07	; 7
 7cc:	8e 25       	eor	r24, r14
 7ce:	87 b9       	out	0x07, r24	; 7
		
		/*
			Read from DHT (humidity and temperature)
			Read once every 5s
		*/
		if (DHT_delay % 20 == 0) {
 7d0:	c6 01       	movw	r24, r12
 7d2:	64 e1       	ldi	r22, 0x14	; 20
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	0e 94 22 07 	call	0xe44	; 0xe44 <__divmodhi4>
 7da:	89 2b       	or	r24, r25
 7dc:	91 f5       	brne	.+100    	; 0x842 <main+0x2f8>
			Request();
 7de:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Request>
			Response();
 7e2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Response>
			I_RH     = Receive_data();
 7e6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Receive_data>
 7ea:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <I_RH>
			D_RH     = Receive_data();
 7ee:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Receive_data>
 7f2:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <D_RH>
			I_Temp   = Receive_data();
 7f6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Receive_data>
 7fa:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <I_Temp>
			D_Temp   = Receive_data();
 7fe:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Receive_data>
 802:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <D_Temp>
			CheckSum = Receive_data();
 806:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Receive_data>
 80a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <CheckSum>
			
			tempFlag = (I_Temp < T_MIN || I_Temp > T_MAX) ? 1 : 0;
 80e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <I_Temp>
 812:	82 51       	subi	r24, 0x12	; 18
 814:	2f 2d       	mov	r18, r15
 816:	90 2f       	mov	r25, r16
 818:	85 31       	cpi	r24, 0x15	; 21
 81a:	10 f4       	brcc	.+4      	; 0x820 <main+0x2d6>
 81c:	23 2d       	mov	r18, r3
 81e:	92 2d       	mov	r25, r2
 820:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <tempFlag>
 824:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <tempFlag+0x1>
			humFlag = (I_RH < H_MIN || I_RH > H_MAX) ? 1 : 0;
 828:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <I_RH>
 82c:	8f 50       	subi	r24, 0x0F	; 15
 82e:	2f 2d       	mov	r18, r15
 830:	90 2f       	mov	r25, r16
 832:	86 35       	cpi	r24, 0x56	; 86
 834:	10 f4       	brcc	.+4      	; 0x83a <main+0x2f0>
 836:	23 2d       	mov	r18, r3
 838:	92 2d       	mov	r25, r2
 83a:	20 93 bf 00 	sts	0x00BF, r18	; 0x8000bf <humFlag>
 83e:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <humFlag+0x1>
		}
		DHT_delay++;
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	c8 1a       	sub	r12, r24
 846:	d8 0a       	sbc	r13, r24

		/*	Display on LCD	*/
		switch (view) {
 848:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 84c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	91 05       	cpc	r25, r1
 854:	41 f0       	breq	.+16     	; 0x866 <main+0x31c>
 856:	82 30       	cpi	r24, 0x02	; 2
 858:	91 05       	cpc	r25, r1
 85a:	41 f0       	breq	.+16     	; 0x86c <main+0x322>
 85c:	89 2b       	or	r24, r25
 85e:	41 f4       	brne	.+16     	; 0x870 <main+0x326>
			case 0:
				printLight();
 860:	0e 94 12 01 	call	0x224	; 0x224 <printLight>
				break;
 864:	05 c0       	rjmp	.+10     	; 0x870 <main+0x326>
			case 1:
				printDHT();
 866:	0e 94 88 01 	call	0x310	; 0x310 <printDHT>
				break;
 86a:	02 c0       	rjmp	.+4      	; 0x870 <main+0x326>
			case 2:
				printMoisture();
 86c:	0e 94 36 01 	call	0x26c	; 0x26c <printMoisture>
				break;
		}
		
		beeper();
 870:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <beeper>
 874:	9f ef       	ldi	r25, 0xFF	; 255
 876:	2f e9       	ldi	r18, 0x9F	; 159
 878:	85 e0       	ldi	r24, 0x05	; 5
 87a:	91 50       	subi	r25, 0x01	; 1
 87c:	20 40       	sbci	r18, 0x00	; 0
 87e:	80 40       	sbci	r24, 0x00	; 0
 880:	e1 f7       	brne	.-8      	; 0x87a <main+0x330>
 882:	00 c0       	rjmp	.+0      	; 0x884 <main+0x33a>
 884:	00 00       	nop
 886:	8c ce       	rjmp	.-744    	; 0x5a0 <main+0x56>

00000888 <morse_init>:
#include "morseCode.h"

void morse_init() {
	MORSE_DDR |= _BV(MORSE_PIN);
 888:	b8 9a       	sbi	0x17, 0	; 23
	MORSE_PORT |= _BV(MORSE_PIN);
 88a:	c0 9a       	sbi	0x18, 0	; 24
 88c:	08 95       	ret

0000088e <morse_signal>:
}

void morse_signal(uint16_t duration) {
	MORSE_PORT ^= _BV(MORSE_PIN);
 88e:	38 b3       	in	r19, 0x18	; 24
 890:	21 e0       	ldi	r18, 0x01	; 1
 892:	23 27       	eor	r18, r19
 894:	28 bb       	out	0x18, r18	; 24
	
	for (uint16_t i = 0; i < duration; i++)
 896:	00 97       	sbiw	r24, 0x00	; 0
 898:	59 f0       	breq	.+22     	; 0x8b0 <morse_signal+0x22>
 89a:	20 e0       	ldi	r18, 0x00	; 0
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	e3 e3       	ldi	r30, 0x33	; 51
 8a0:	f7 e0       	ldi	r31, 0x07	; 7
 8a2:	31 97       	sbiw	r30, 0x01	; 1
 8a4:	f1 f7       	brne	.-4      	; 0x8a2 <morse_signal+0x14>
 8a6:	2f 5f       	subi	r18, 0xFF	; 255
 8a8:	3f 4f       	sbci	r19, 0xFF	; 255
 8aa:	82 17       	cp	r24, r18
 8ac:	93 07       	cpc	r25, r19
 8ae:	b9 f7       	brne	.-18     	; 0x89e <morse_signal+0x10>
		 _delay_ms(1);
	
	MORSE_PORT ^= _BV(MORSE_PIN);
 8b0:	98 b3       	in	r25, 0x18	; 24
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	89 27       	eor	r24, r25
 8b6:	88 bb       	out	0x18, r24	; 24
 8b8:	ff ef       	ldi	r31, 0xFF	; 255
 8ba:	2f e3       	ldi	r18, 0x3F	; 63
 8bc:	82 e0       	ldi	r24, 0x02	; 2
 8be:	f1 50       	subi	r31, 0x01	; 1
 8c0:	20 40       	sbci	r18, 0x00	; 0
 8c2:	80 40       	sbci	r24, 0x00	; 0
 8c4:	e1 f7       	brne	.-8      	; 0x8be <morse_signal+0x30>
 8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <morse_signal+0x3a>
 8c8:	00 00       	nop
 8ca:	08 95       	ret

000008cc <morse_L>:
	_delay_ms(SHORT_MS);
}

void morse_L() {
	morse_signal(SHORT_MS);
 8cc:	84 e6       	ldi	r24, 0x64	; 100
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(LONG_MS);
 8d4:	8c e2       	ldi	r24, 0x2C	; 44
 8d6:	91 e0       	ldi	r25, 0x01	; 1
 8d8:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(SHORT_MS);
 8dc:	84 e6       	ldi	r24, 0x64	; 100
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(SHORT_MS);
 8e4:	84 e6       	ldi	r24, 0x64	; 100
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
 8ec:	2f ef       	ldi	r18, 0xFF	; 255
 8ee:	8f eb       	ldi	r24, 0xBF	; 191
 8f0:	96 e0       	ldi	r25, 0x06	; 6
 8f2:	21 50       	subi	r18, 0x01	; 1
 8f4:	80 40       	sbci	r24, 0x00	; 0
 8f6:	90 40       	sbci	r25, 0x00	; 0
 8f8:	e1 f7       	brne	.-8      	; 0x8f2 <morse_L+0x26>
 8fa:	00 c0       	rjmp	.+0      	; 0x8fc <morse_L+0x30>
 8fc:	00 00       	nop
 8fe:	08 95       	ret

00000900 <morse_T>:
	_delay_ms(LONG_MS);
}

void morse_T() {
	morse_signal(LONG_MS);
 900:	8c e2       	ldi	r24, 0x2C	; 44
 902:	91 e0       	ldi	r25, 0x01	; 1
 904:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
 908:	2f ef       	ldi	r18, 0xFF	; 255
 90a:	8f eb       	ldi	r24, 0xBF	; 191
 90c:	96 e0       	ldi	r25, 0x06	; 6
 90e:	21 50       	subi	r18, 0x01	; 1
 910:	80 40       	sbci	r24, 0x00	; 0
 912:	90 40       	sbci	r25, 0x00	; 0
 914:	e1 f7       	brne	.-8      	; 0x90e <morse_T+0xe>
 916:	00 c0       	rjmp	.+0      	; 0x918 <morse_T+0x18>
 918:	00 00       	nop
 91a:	08 95       	ret

0000091c <morse_H>:
	_delay_ms(LONG_MS);
}

void morse_H() {
	morse_signal(SHORT_MS);
 91c:	84 e6       	ldi	r24, 0x64	; 100
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(SHORT_MS);
 924:	84 e6       	ldi	r24, 0x64	; 100
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(SHORT_MS);
 92c:	84 e6       	ldi	r24, 0x64	; 100
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(SHORT_MS);
 934:	84 e6       	ldi	r24, 0x64	; 100
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
 93c:	2f ef       	ldi	r18, 0xFF	; 255
 93e:	8f eb       	ldi	r24, 0xBF	; 191
 940:	96 e0       	ldi	r25, 0x06	; 6
 942:	21 50       	subi	r18, 0x01	; 1
 944:	80 40       	sbci	r24, 0x00	; 0
 946:	90 40       	sbci	r25, 0x00	; 0
 948:	e1 f7       	brne	.-8      	; 0x942 <morse_H+0x26>
 94a:	00 c0       	rjmp	.+0      	; 0x94c <morse_H+0x30>
 94c:	00 00       	nop
 94e:	08 95       	ret

00000950 <morse_1>:
	_delay_ms(LONG_MS);
}

void morse_1() {
	morse_signal(SHORT_MS);
 950:	84 e6       	ldi	r24, 0x64	; 100
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(LONG_MS);
 958:	8c e2       	ldi	r24, 0x2C	; 44
 95a:	91 e0       	ldi	r25, 0x01	; 1
 95c:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(LONG_MS);
 960:	8c e2       	ldi	r24, 0x2C	; 44
 962:	91 e0       	ldi	r25, 0x01	; 1
 964:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(LONG_MS);
 968:	8c e2       	ldi	r24, 0x2C	; 44
 96a:	91 e0       	ldi	r25, 0x01	; 1
 96c:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(LONG_MS);
 970:	8c e2       	ldi	r24, 0x2C	; 44
 972:	91 e0       	ldi	r25, 0x01	; 1
 974:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
 978:	2f ef       	ldi	r18, 0xFF	; 255
 97a:	8f eb       	ldi	r24, 0xBF	; 191
 97c:	96 e0       	ldi	r25, 0x06	; 6
 97e:	21 50       	subi	r18, 0x01	; 1
 980:	80 40       	sbci	r24, 0x00	; 0
 982:	90 40       	sbci	r25, 0x00	; 0
 984:	e1 f7       	brne	.-8      	; 0x97e <morse_1+0x2e>
 986:	00 c0       	rjmp	.+0      	; 0x988 <morse_1+0x38>
 988:	00 00       	nop
 98a:	08 95       	ret

0000098c <morse_2>:
	_delay_ms(LONG_MS);
}

void morse_2() {
	morse_signal(SHORT_MS);
 98c:	84 e6       	ldi	r24, 0x64	; 100
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(SHORT_MS);
 994:	84 e6       	ldi	r24, 0x64	; 100
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(LONG_MS);
 99c:	8c e2       	ldi	r24, 0x2C	; 44
 99e:	91 e0       	ldi	r25, 0x01	; 1
 9a0:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(LONG_MS);
 9a4:	8c e2       	ldi	r24, 0x2C	; 44
 9a6:	91 e0       	ldi	r25, 0x01	; 1
 9a8:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
	morse_signal(LONG_MS);
 9ac:	8c e2       	ldi	r24, 0x2C	; 44
 9ae:	91 e0       	ldi	r25, 0x01	; 1
 9b0:	0e 94 47 04 	call	0x88e	; 0x88e <morse_signal>
 9b4:	2f ef       	ldi	r18, 0xFF	; 255
 9b6:	8f eb       	ldi	r24, 0xBF	; 191
 9b8:	96 e0       	ldi	r25, 0x06	; 6
 9ba:	21 50       	subi	r18, 0x01	; 1
 9bc:	80 40       	sbci	r24, 0x00	; 0
 9be:	90 40       	sbci	r25, 0x00	; 0
 9c0:	e1 f7       	brne	.-8      	; 0x9ba <morse_2+0x2e>
 9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <morse_2+0x38>
 9c4:	00 00       	nop
 9c6:	08 95       	ret

000009c8 <__subsf3>:
 9c8:	50 58       	subi	r21, 0x80	; 128

000009ca <__addsf3>:
 9ca:	bb 27       	eor	r27, r27
 9cc:	aa 27       	eor	r26, r26
 9ce:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3x>
 9d2:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_round>
 9d6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fp_pscA>
 9da:	38 f0       	brcs	.+14     	; 0x9ea <__addsf3+0x20>
 9dc:	0e 94 6f 06 	call	0xcde	; 0xcde <__fp_pscB>
 9e0:	20 f0       	brcs	.+8      	; 0x9ea <__addsf3+0x20>
 9e2:	39 f4       	brne	.+14     	; 0x9f2 <__addsf3+0x28>
 9e4:	9f 3f       	cpi	r25, 0xFF	; 255
 9e6:	19 f4       	brne	.+6      	; 0x9ee <__addsf3+0x24>
 9e8:	26 f4       	brtc	.+8      	; 0x9f2 <__addsf3+0x28>
 9ea:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_nan>
 9ee:	0e f4       	brtc	.+2      	; 0x9f2 <__addsf3+0x28>
 9f0:	e0 95       	com	r30
 9f2:	e7 fb       	bst	r30, 7
 9f4:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_inf>

000009f8 <__addsf3x>:
 9f8:	e9 2f       	mov	r30, r25
 9fa:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fp_split3>
 9fe:	58 f3       	brcs	.-42     	; 0x9d6 <__addsf3+0xc>
 a00:	ba 17       	cp	r27, r26
 a02:	62 07       	cpc	r22, r18
 a04:	73 07       	cpc	r23, r19
 a06:	84 07       	cpc	r24, r20
 a08:	95 07       	cpc	r25, r21
 a0a:	20 f0       	brcs	.+8      	; 0xa14 <__addsf3x+0x1c>
 a0c:	79 f4       	brne	.+30     	; 0xa2c <__addsf3x+0x34>
 a0e:	a6 f5       	brtc	.+104    	; 0xa78 <__addsf3x+0x80>
 a10:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_zero>
 a14:	0e f4       	brtc	.+2      	; 0xa18 <__addsf3x+0x20>
 a16:	e0 95       	com	r30
 a18:	0b 2e       	mov	r0, r27
 a1a:	ba 2f       	mov	r27, r26
 a1c:	a0 2d       	mov	r26, r0
 a1e:	0b 01       	movw	r0, r22
 a20:	b9 01       	movw	r22, r18
 a22:	90 01       	movw	r18, r0
 a24:	0c 01       	movw	r0, r24
 a26:	ca 01       	movw	r24, r20
 a28:	a0 01       	movw	r20, r0
 a2a:	11 24       	eor	r1, r1
 a2c:	ff 27       	eor	r31, r31
 a2e:	59 1b       	sub	r21, r25
 a30:	99 f0       	breq	.+38     	; 0xa58 <__addsf3x+0x60>
 a32:	59 3f       	cpi	r21, 0xF9	; 249
 a34:	50 f4       	brcc	.+20     	; 0xa4a <__addsf3x+0x52>
 a36:	50 3e       	cpi	r21, 0xE0	; 224
 a38:	68 f1       	brcs	.+90     	; 0xa94 <__addsf3x+0x9c>
 a3a:	1a 16       	cp	r1, r26
 a3c:	f0 40       	sbci	r31, 0x00	; 0
 a3e:	a2 2f       	mov	r26, r18
 a40:	23 2f       	mov	r18, r19
 a42:	34 2f       	mov	r19, r20
 a44:	44 27       	eor	r20, r20
 a46:	58 5f       	subi	r21, 0xF8	; 248
 a48:	f3 cf       	rjmp	.-26     	; 0xa30 <__addsf3x+0x38>
 a4a:	46 95       	lsr	r20
 a4c:	37 95       	ror	r19
 a4e:	27 95       	ror	r18
 a50:	a7 95       	ror	r26
 a52:	f0 40       	sbci	r31, 0x00	; 0
 a54:	53 95       	inc	r21
 a56:	c9 f7       	brne	.-14     	; 0xa4a <__addsf3x+0x52>
 a58:	7e f4       	brtc	.+30     	; 0xa78 <__addsf3x+0x80>
 a5a:	1f 16       	cp	r1, r31
 a5c:	ba 0b       	sbc	r27, r26
 a5e:	62 0b       	sbc	r22, r18
 a60:	73 0b       	sbc	r23, r19
 a62:	84 0b       	sbc	r24, r20
 a64:	ba f0       	brmi	.+46     	; 0xa94 <__addsf3x+0x9c>
 a66:	91 50       	subi	r25, 0x01	; 1
 a68:	a1 f0       	breq	.+40     	; 0xa92 <__addsf3x+0x9a>
 a6a:	ff 0f       	add	r31, r31
 a6c:	bb 1f       	adc	r27, r27
 a6e:	66 1f       	adc	r22, r22
 a70:	77 1f       	adc	r23, r23
 a72:	88 1f       	adc	r24, r24
 a74:	c2 f7       	brpl	.-16     	; 0xa66 <__addsf3x+0x6e>
 a76:	0e c0       	rjmp	.+28     	; 0xa94 <__addsf3x+0x9c>
 a78:	ba 0f       	add	r27, r26
 a7a:	62 1f       	adc	r22, r18
 a7c:	73 1f       	adc	r23, r19
 a7e:	84 1f       	adc	r24, r20
 a80:	48 f4       	brcc	.+18     	; 0xa94 <__addsf3x+0x9c>
 a82:	87 95       	ror	r24
 a84:	77 95       	ror	r23
 a86:	67 95       	ror	r22
 a88:	b7 95       	ror	r27
 a8a:	f7 95       	ror	r31
 a8c:	9e 3f       	cpi	r25, 0xFE	; 254
 a8e:	08 f0       	brcs	.+2      	; 0xa92 <__addsf3x+0x9a>
 a90:	b0 cf       	rjmp	.-160    	; 0x9f2 <__addsf3+0x28>
 a92:	93 95       	inc	r25
 a94:	88 0f       	add	r24, r24
 a96:	08 f0       	brcs	.+2      	; 0xa9a <__addsf3x+0xa2>
 a98:	99 27       	eor	r25, r25
 a9a:	ee 0f       	add	r30, r30
 a9c:	97 95       	ror	r25
 a9e:	87 95       	ror	r24
 aa0:	08 95       	ret

00000aa2 <__cmpsf2>:
 aa2:	0e 94 3b 06 	call	0xc76	; 0xc76 <__fp_cmp>
 aa6:	08 f4       	brcc	.+2      	; 0xaaa <__cmpsf2+0x8>
 aa8:	81 e0       	ldi	r24, 0x01	; 1
 aaa:	08 95       	ret

00000aac <__divsf3>:
 aac:	0e 94 6a 05 	call	0xad4	; 0xad4 <__divsf3x>
 ab0:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_round>
 ab4:	0e 94 6f 06 	call	0xcde	; 0xcde <__fp_pscB>
 ab8:	58 f0       	brcs	.+22     	; 0xad0 <__divsf3+0x24>
 aba:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fp_pscA>
 abe:	40 f0       	brcs	.+16     	; 0xad0 <__divsf3+0x24>
 ac0:	29 f4       	brne	.+10     	; 0xacc <__divsf3+0x20>
 ac2:	5f 3f       	cpi	r21, 0xFF	; 255
 ac4:	29 f0       	breq	.+10     	; 0xad0 <__divsf3+0x24>
 ac6:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_inf>
 aca:	51 11       	cpse	r21, r1
 acc:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__fp_szero>
 ad0:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_nan>

00000ad4 <__divsf3x>:
 ad4:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fp_split3>
 ad8:	68 f3       	brcs	.-38     	; 0xab4 <__divsf3+0x8>

00000ada <__divsf3_pse>:
 ada:	99 23       	and	r25, r25
 adc:	b1 f3       	breq	.-20     	; 0xaca <__divsf3+0x1e>
 ade:	55 23       	and	r21, r21
 ae0:	91 f3       	breq	.-28     	; 0xac6 <__divsf3+0x1a>
 ae2:	95 1b       	sub	r25, r21
 ae4:	55 0b       	sbc	r21, r21
 ae6:	bb 27       	eor	r27, r27
 ae8:	aa 27       	eor	r26, r26
 aea:	62 17       	cp	r22, r18
 aec:	73 07       	cpc	r23, r19
 aee:	84 07       	cpc	r24, r20
 af0:	38 f0       	brcs	.+14     	; 0xb00 <__divsf3_pse+0x26>
 af2:	9f 5f       	subi	r25, 0xFF	; 255
 af4:	5f 4f       	sbci	r21, 0xFF	; 255
 af6:	22 0f       	add	r18, r18
 af8:	33 1f       	adc	r19, r19
 afa:	44 1f       	adc	r20, r20
 afc:	aa 1f       	adc	r26, r26
 afe:	a9 f3       	breq	.-22     	; 0xaea <__divsf3_pse+0x10>
 b00:	35 d0       	rcall	.+106    	; 0xb6c <__divsf3_pse+0x92>
 b02:	0e 2e       	mov	r0, r30
 b04:	3a f0       	brmi	.+14     	; 0xb14 <__divsf3_pse+0x3a>
 b06:	e0 e8       	ldi	r30, 0x80	; 128
 b08:	32 d0       	rcall	.+100    	; 0xb6e <__divsf3_pse+0x94>
 b0a:	91 50       	subi	r25, 0x01	; 1
 b0c:	50 40       	sbci	r21, 0x00	; 0
 b0e:	e6 95       	lsr	r30
 b10:	00 1c       	adc	r0, r0
 b12:	ca f7       	brpl	.-14     	; 0xb06 <__divsf3_pse+0x2c>
 b14:	2b d0       	rcall	.+86     	; 0xb6c <__divsf3_pse+0x92>
 b16:	fe 2f       	mov	r31, r30
 b18:	29 d0       	rcall	.+82     	; 0xb6c <__divsf3_pse+0x92>
 b1a:	66 0f       	add	r22, r22
 b1c:	77 1f       	adc	r23, r23
 b1e:	88 1f       	adc	r24, r24
 b20:	bb 1f       	adc	r27, r27
 b22:	26 17       	cp	r18, r22
 b24:	37 07       	cpc	r19, r23
 b26:	48 07       	cpc	r20, r24
 b28:	ab 07       	cpc	r26, r27
 b2a:	b0 e8       	ldi	r27, 0x80	; 128
 b2c:	09 f0       	breq	.+2      	; 0xb30 <__divsf3_pse+0x56>
 b2e:	bb 0b       	sbc	r27, r27
 b30:	80 2d       	mov	r24, r0
 b32:	bf 01       	movw	r22, r30
 b34:	ff 27       	eor	r31, r31
 b36:	93 58       	subi	r25, 0x83	; 131
 b38:	5f 4f       	sbci	r21, 0xFF	; 255
 b3a:	3a f0       	brmi	.+14     	; 0xb4a <__divsf3_pse+0x70>
 b3c:	9e 3f       	cpi	r25, 0xFE	; 254
 b3e:	51 05       	cpc	r21, r1
 b40:	78 f0       	brcs	.+30     	; 0xb60 <__divsf3_pse+0x86>
 b42:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_inf>
 b46:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__fp_szero>
 b4a:	5f 3f       	cpi	r21, 0xFF	; 255
 b4c:	e4 f3       	brlt	.-8      	; 0xb46 <__divsf3_pse+0x6c>
 b4e:	98 3e       	cpi	r25, 0xE8	; 232
 b50:	d4 f3       	brlt	.-12     	; 0xb46 <__divsf3_pse+0x6c>
 b52:	86 95       	lsr	r24
 b54:	77 95       	ror	r23
 b56:	67 95       	ror	r22
 b58:	b7 95       	ror	r27
 b5a:	f7 95       	ror	r31
 b5c:	9f 5f       	subi	r25, 0xFF	; 255
 b5e:	c9 f7       	brne	.-14     	; 0xb52 <__divsf3_pse+0x78>
 b60:	88 0f       	add	r24, r24
 b62:	91 1d       	adc	r25, r1
 b64:	96 95       	lsr	r25
 b66:	87 95       	ror	r24
 b68:	97 f9       	bld	r25, 7
 b6a:	08 95       	ret
 b6c:	e1 e0       	ldi	r30, 0x01	; 1
 b6e:	66 0f       	add	r22, r22
 b70:	77 1f       	adc	r23, r23
 b72:	88 1f       	adc	r24, r24
 b74:	bb 1f       	adc	r27, r27
 b76:	62 17       	cp	r22, r18
 b78:	73 07       	cpc	r23, r19
 b7a:	84 07       	cpc	r24, r20
 b7c:	ba 07       	cpc	r27, r26
 b7e:	20 f0       	brcs	.+8      	; 0xb88 <__divsf3_pse+0xae>
 b80:	62 1b       	sub	r22, r18
 b82:	73 0b       	sbc	r23, r19
 b84:	84 0b       	sbc	r24, r20
 b86:	ba 0b       	sbc	r27, r26
 b88:	ee 1f       	adc	r30, r30
 b8a:	88 f7       	brcc	.-30     	; 0xb6e <__divsf3_pse+0x94>
 b8c:	e0 95       	com	r30
 b8e:	08 95       	ret

00000b90 <__fixsfsi>:
 b90:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixunssfsi>
 b94:	68 94       	set
 b96:	b1 11       	cpse	r27, r1
 b98:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__fp_szero>
 b9c:	08 95       	ret

00000b9e <__fixunssfsi>:
 b9e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fp_splitA>
 ba2:	88 f0       	brcs	.+34     	; 0xbc6 <__fixunssfsi+0x28>
 ba4:	9f 57       	subi	r25, 0x7F	; 127
 ba6:	98 f0       	brcs	.+38     	; 0xbce <__fixunssfsi+0x30>
 ba8:	b9 2f       	mov	r27, r25
 baa:	99 27       	eor	r25, r25
 bac:	b7 51       	subi	r27, 0x17	; 23
 bae:	b0 f0       	brcs	.+44     	; 0xbdc <__fixunssfsi+0x3e>
 bb0:	e1 f0       	breq	.+56     	; 0xbea <__fixunssfsi+0x4c>
 bb2:	66 0f       	add	r22, r22
 bb4:	77 1f       	adc	r23, r23
 bb6:	88 1f       	adc	r24, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	1a f0       	brmi	.+6      	; 0xbc2 <__fixunssfsi+0x24>
 bbc:	ba 95       	dec	r27
 bbe:	c9 f7       	brne	.-14     	; 0xbb2 <__fixunssfsi+0x14>
 bc0:	14 c0       	rjmp	.+40     	; 0xbea <__fixunssfsi+0x4c>
 bc2:	b1 30       	cpi	r27, 0x01	; 1
 bc4:	91 f0       	breq	.+36     	; 0xbea <__fixunssfsi+0x4c>
 bc6:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fp_zero>
 bca:	b1 e0       	ldi	r27, 0x01	; 1
 bcc:	08 95       	ret
 bce:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_zero>
 bd2:	67 2f       	mov	r22, r23
 bd4:	78 2f       	mov	r23, r24
 bd6:	88 27       	eor	r24, r24
 bd8:	b8 5f       	subi	r27, 0xF8	; 248
 bda:	39 f0       	breq	.+14     	; 0xbea <__fixunssfsi+0x4c>
 bdc:	b9 3f       	cpi	r27, 0xF9	; 249
 bde:	cc f3       	brlt	.-14     	; 0xbd2 <__fixunssfsi+0x34>
 be0:	86 95       	lsr	r24
 be2:	77 95       	ror	r23
 be4:	67 95       	ror	r22
 be6:	b3 95       	inc	r27
 be8:	d9 f7       	brne	.-10     	; 0xbe0 <__fixunssfsi+0x42>
 bea:	3e f4       	brtc	.+14     	; 0xbfa <__fixunssfsi+0x5c>
 bec:	90 95       	com	r25
 bee:	80 95       	com	r24
 bf0:	70 95       	com	r23
 bf2:	61 95       	neg	r22
 bf4:	7f 4f       	sbci	r23, 0xFF	; 255
 bf6:	8f 4f       	sbci	r24, 0xFF	; 255
 bf8:	9f 4f       	sbci	r25, 0xFF	; 255
 bfa:	08 95       	ret

00000bfc <__floatunsisf>:
 bfc:	e8 94       	clt
 bfe:	09 c0       	rjmp	.+18     	; 0xc12 <__floatsisf+0x12>

00000c00 <__floatsisf>:
 c00:	97 fb       	bst	r25, 7
 c02:	3e f4       	brtc	.+14     	; 0xc12 <__floatsisf+0x12>
 c04:	90 95       	com	r25
 c06:	80 95       	com	r24
 c08:	70 95       	com	r23
 c0a:	61 95       	neg	r22
 c0c:	7f 4f       	sbci	r23, 0xFF	; 255
 c0e:	8f 4f       	sbci	r24, 0xFF	; 255
 c10:	9f 4f       	sbci	r25, 0xFF	; 255
 c12:	99 23       	and	r25, r25
 c14:	a9 f0       	breq	.+42     	; 0xc40 <__floatsisf+0x40>
 c16:	f9 2f       	mov	r31, r25
 c18:	96 e9       	ldi	r25, 0x96	; 150
 c1a:	bb 27       	eor	r27, r27
 c1c:	93 95       	inc	r25
 c1e:	f6 95       	lsr	r31
 c20:	87 95       	ror	r24
 c22:	77 95       	ror	r23
 c24:	67 95       	ror	r22
 c26:	b7 95       	ror	r27
 c28:	f1 11       	cpse	r31, r1
 c2a:	f8 cf       	rjmp	.-16     	; 0xc1c <__floatsisf+0x1c>
 c2c:	fa f4       	brpl	.+62     	; 0xc6c <__floatsisf+0x6c>
 c2e:	bb 0f       	add	r27, r27
 c30:	11 f4       	brne	.+4      	; 0xc36 <__floatsisf+0x36>
 c32:	60 ff       	sbrs	r22, 0
 c34:	1b c0       	rjmp	.+54     	; 0xc6c <__floatsisf+0x6c>
 c36:	6f 5f       	subi	r22, 0xFF	; 255
 c38:	7f 4f       	sbci	r23, 0xFF	; 255
 c3a:	8f 4f       	sbci	r24, 0xFF	; 255
 c3c:	9f 4f       	sbci	r25, 0xFF	; 255
 c3e:	16 c0       	rjmp	.+44     	; 0xc6c <__floatsisf+0x6c>
 c40:	88 23       	and	r24, r24
 c42:	11 f0       	breq	.+4      	; 0xc48 <__floatsisf+0x48>
 c44:	96 e9       	ldi	r25, 0x96	; 150
 c46:	11 c0       	rjmp	.+34     	; 0xc6a <__floatsisf+0x6a>
 c48:	77 23       	and	r23, r23
 c4a:	21 f0       	breq	.+8      	; 0xc54 <__floatsisf+0x54>
 c4c:	9e e8       	ldi	r25, 0x8E	; 142
 c4e:	87 2f       	mov	r24, r23
 c50:	76 2f       	mov	r23, r22
 c52:	05 c0       	rjmp	.+10     	; 0xc5e <__floatsisf+0x5e>
 c54:	66 23       	and	r22, r22
 c56:	71 f0       	breq	.+28     	; 0xc74 <__floatsisf+0x74>
 c58:	96 e8       	ldi	r25, 0x86	; 134
 c5a:	86 2f       	mov	r24, r22
 c5c:	70 e0       	ldi	r23, 0x00	; 0
 c5e:	60 e0       	ldi	r22, 0x00	; 0
 c60:	2a f0       	brmi	.+10     	; 0xc6c <__floatsisf+0x6c>
 c62:	9a 95       	dec	r25
 c64:	66 0f       	add	r22, r22
 c66:	77 1f       	adc	r23, r23
 c68:	88 1f       	adc	r24, r24
 c6a:	da f7       	brpl	.-10     	; 0xc62 <__floatsisf+0x62>
 c6c:	88 0f       	add	r24, r24
 c6e:	96 95       	lsr	r25
 c70:	87 95       	ror	r24
 c72:	97 f9       	bld	r25, 7
 c74:	08 95       	ret

00000c76 <__fp_cmp>:
 c76:	99 0f       	add	r25, r25
 c78:	00 08       	sbc	r0, r0
 c7a:	55 0f       	add	r21, r21
 c7c:	aa 0b       	sbc	r26, r26
 c7e:	e0 e8       	ldi	r30, 0x80	; 128
 c80:	fe ef       	ldi	r31, 0xFE	; 254
 c82:	16 16       	cp	r1, r22
 c84:	17 06       	cpc	r1, r23
 c86:	e8 07       	cpc	r30, r24
 c88:	f9 07       	cpc	r31, r25
 c8a:	c0 f0       	brcs	.+48     	; 0xcbc <__fp_cmp+0x46>
 c8c:	12 16       	cp	r1, r18
 c8e:	13 06       	cpc	r1, r19
 c90:	e4 07       	cpc	r30, r20
 c92:	f5 07       	cpc	r31, r21
 c94:	98 f0       	brcs	.+38     	; 0xcbc <__fp_cmp+0x46>
 c96:	62 1b       	sub	r22, r18
 c98:	73 0b       	sbc	r23, r19
 c9a:	84 0b       	sbc	r24, r20
 c9c:	95 0b       	sbc	r25, r21
 c9e:	39 f4       	brne	.+14     	; 0xcae <__fp_cmp+0x38>
 ca0:	0a 26       	eor	r0, r26
 ca2:	61 f0       	breq	.+24     	; 0xcbc <__fp_cmp+0x46>
 ca4:	23 2b       	or	r18, r19
 ca6:	24 2b       	or	r18, r20
 ca8:	25 2b       	or	r18, r21
 caa:	21 f4       	brne	.+8      	; 0xcb4 <__fp_cmp+0x3e>
 cac:	08 95       	ret
 cae:	0a 26       	eor	r0, r26
 cb0:	09 f4       	brne	.+2      	; 0xcb4 <__fp_cmp+0x3e>
 cb2:	a1 40       	sbci	r26, 0x01	; 1
 cb4:	a6 95       	lsr	r26
 cb6:	8f ef       	ldi	r24, 0xFF	; 255
 cb8:	81 1d       	adc	r24, r1
 cba:	81 1d       	adc	r24, r1
 cbc:	08 95       	ret

00000cbe <__fp_inf>:
 cbe:	97 f9       	bld	r25, 7
 cc0:	9f 67       	ori	r25, 0x7F	; 127
 cc2:	80 e8       	ldi	r24, 0x80	; 128
 cc4:	70 e0       	ldi	r23, 0x00	; 0
 cc6:	60 e0       	ldi	r22, 0x00	; 0
 cc8:	08 95       	ret

00000cca <__fp_nan>:
 cca:	9f ef       	ldi	r25, 0xFF	; 255
 ccc:	80 ec       	ldi	r24, 0xC0	; 192
 cce:	08 95       	ret

00000cd0 <__fp_pscA>:
 cd0:	00 24       	eor	r0, r0
 cd2:	0a 94       	dec	r0
 cd4:	16 16       	cp	r1, r22
 cd6:	17 06       	cpc	r1, r23
 cd8:	18 06       	cpc	r1, r24
 cda:	09 06       	cpc	r0, r25
 cdc:	08 95       	ret

00000cde <__fp_pscB>:
 cde:	00 24       	eor	r0, r0
 ce0:	0a 94       	dec	r0
 ce2:	12 16       	cp	r1, r18
 ce4:	13 06       	cpc	r1, r19
 ce6:	14 06       	cpc	r1, r20
 ce8:	05 06       	cpc	r0, r21
 cea:	08 95       	ret

00000cec <__fp_round>:
 cec:	09 2e       	mov	r0, r25
 cee:	03 94       	inc	r0
 cf0:	00 0c       	add	r0, r0
 cf2:	11 f4       	brne	.+4      	; 0xcf8 <__fp_round+0xc>
 cf4:	88 23       	and	r24, r24
 cf6:	52 f0       	brmi	.+20     	; 0xd0c <__fp_round+0x20>
 cf8:	bb 0f       	add	r27, r27
 cfa:	40 f4       	brcc	.+16     	; 0xd0c <__fp_round+0x20>
 cfc:	bf 2b       	or	r27, r31
 cfe:	11 f4       	brne	.+4      	; 0xd04 <__fp_round+0x18>
 d00:	60 ff       	sbrs	r22, 0
 d02:	04 c0       	rjmp	.+8      	; 0xd0c <__fp_round+0x20>
 d04:	6f 5f       	subi	r22, 0xFF	; 255
 d06:	7f 4f       	sbci	r23, 0xFF	; 255
 d08:	8f 4f       	sbci	r24, 0xFF	; 255
 d0a:	9f 4f       	sbci	r25, 0xFF	; 255
 d0c:	08 95       	ret

00000d0e <__fp_split3>:
 d0e:	57 fd       	sbrc	r21, 7
 d10:	90 58       	subi	r25, 0x80	; 128
 d12:	44 0f       	add	r20, r20
 d14:	55 1f       	adc	r21, r21
 d16:	59 f0       	breq	.+22     	; 0xd2e <__fp_splitA+0x10>
 d18:	5f 3f       	cpi	r21, 0xFF	; 255
 d1a:	71 f0       	breq	.+28     	; 0xd38 <__fp_splitA+0x1a>
 d1c:	47 95       	ror	r20

00000d1e <__fp_splitA>:
 d1e:	88 0f       	add	r24, r24
 d20:	97 fb       	bst	r25, 7
 d22:	99 1f       	adc	r25, r25
 d24:	61 f0       	breq	.+24     	; 0xd3e <__fp_splitA+0x20>
 d26:	9f 3f       	cpi	r25, 0xFF	; 255
 d28:	79 f0       	breq	.+30     	; 0xd48 <__fp_splitA+0x2a>
 d2a:	87 95       	ror	r24
 d2c:	08 95       	ret
 d2e:	12 16       	cp	r1, r18
 d30:	13 06       	cpc	r1, r19
 d32:	14 06       	cpc	r1, r20
 d34:	55 1f       	adc	r21, r21
 d36:	f2 cf       	rjmp	.-28     	; 0xd1c <__fp_split3+0xe>
 d38:	46 95       	lsr	r20
 d3a:	f1 df       	rcall	.-30     	; 0xd1e <__fp_splitA>
 d3c:	08 c0       	rjmp	.+16     	; 0xd4e <__fp_splitA+0x30>
 d3e:	16 16       	cp	r1, r22
 d40:	17 06       	cpc	r1, r23
 d42:	18 06       	cpc	r1, r24
 d44:	99 1f       	adc	r25, r25
 d46:	f1 cf       	rjmp	.-30     	; 0xd2a <__fp_splitA+0xc>
 d48:	86 95       	lsr	r24
 d4a:	71 05       	cpc	r23, r1
 d4c:	61 05       	cpc	r22, r1
 d4e:	08 94       	sec
 d50:	08 95       	ret

00000d52 <__fp_zero>:
 d52:	e8 94       	clt

00000d54 <__fp_szero>:
 d54:	bb 27       	eor	r27, r27
 d56:	66 27       	eor	r22, r22
 d58:	77 27       	eor	r23, r23
 d5a:	cb 01       	movw	r24, r22
 d5c:	97 f9       	bld	r25, 7
 d5e:	08 95       	ret

00000d60 <__gesf2>:
 d60:	0e 94 3b 06 	call	0xc76	; 0xc76 <__fp_cmp>
 d64:	08 f4       	brcc	.+2      	; 0xd68 <__gesf2+0x8>
 d66:	8f ef       	ldi	r24, 0xFF	; 255
 d68:	08 95       	ret

00000d6a <__mulsf3>:
 d6a:	0e 94 c8 06 	call	0xd90	; 0xd90 <__mulsf3x>
 d6e:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_round>
 d72:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fp_pscA>
 d76:	38 f0       	brcs	.+14     	; 0xd86 <__mulsf3+0x1c>
 d78:	0e 94 6f 06 	call	0xcde	; 0xcde <__fp_pscB>
 d7c:	20 f0       	brcs	.+8      	; 0xd86 <__mulsf3+0x1c>
 d7e:	95 23       	and	r25, r21
 d80:	11 f0       	breq	.+4      	; 0xd86 <__mulsf3+0x1c>
 d82:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_inf>
 d86:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_nan>
 d8a:	11 24       	eor	r1, r1
 d8c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__fp_szero>

00000d90 <__mulsf3x>:
 d90:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fp_split3>
 d94:	70 f3       	brcs	.-36     	; 0xd72 <__mulsf3+0x8>

00000d96 <__mulsf3_pse>:
 d96:	95 9f       	mul	r25, r21
 d98:	c1 f3       	breq	.-16     	; 0xd8a <__mulsf3+0x20>
 d9a:	95 0f       	add	r25, r21
 d9c:	50 e0       	ldi	r21, 0x00	; 0
 d9e:	55 1f       	adc	r21, r21
 da0:	62 9f       	mul	r22, r18
 da2:	f0 01       	movw	r30, r0
 da4:	72 9f       	mul	r23, r18
 da6:	bb 27       	eor	r27, r27
 da8:	f0 0d       	add	r31, r0
 daa:	b1 1d       	adc	r27, r1
 dac:	63 9f       	mul	r22, r19
 dae:	aa 27       	eor	r26, r26
 db0:	f0 0d       	add	r31, r0
 db2:	b1 1d       	adc	r27, r1
 db4:	aa 1f       	adc	r26, r26
 db6:	64 9f       	mul	r22, r20
 db8:	66 27       	eor	r22, r22
 dba:	b0 0d       	add	r27, r0
 dbc:	a1 1d       	adc	r26, r1
 dbe:	66 1f       	adc	r22, r22
 dc0:	82 9f       	mul	r24, r18
 dc2:	22 27       	eor	r18, r18
 dc4:	b0 0d       	add	r27, r0
 dc6:	a1 1d       	adc	r26, r1
 dc8:	62 1f       	adc	r22, r18
 dca:	73 9f       	mul	r23, r19
 dcc:	b0 0d       	add	r27, r0
 dce:	a1 1d       	adc	r26, r1
 dd0:	62 1f       	adc	r22, r18
 dd2:	83 9f       	mul	r24, r19
 dd4:	a0 0d       	add	r26, r0
 dd6:	61 1d       	adc	r22, r1
 dd8:	22 1f       	adc	r18, r18
 dda:	74 9f       	mul	r23, r20
 ddc:	33 27       	eor	r19, r19
 dde:	a0 0d       	add	r26, r0
 de0:	61 1d       	adc	r22, r1
 de2:	23 1f       	adc	r18, r19
 de4:	84 9f       	mul	r24, r20
 de6:	60 0d       	add	r22, r0
 de8:	21 1d       	adc	r18, r1
 dea:	82 2f       	mov	r24, r18
 dec:	76 2f       	mov	r23, r22
 dee:	6a 2f       	mov	r22, r26
 df0:	11 24       	eor	r1, r1
 df2:	9f 57       	subi	r25, 0x7F	; 127
 df4:	50 40       	sbci	r21, 0x00	; 0
 df6:	9a f0       	brmi	.+38     	; 0xe1e <__mulsf3_pse+0x88>
 df8:	f1 f0       	breq	.+60     	; 0xe36 <__mulsf3_pse+0xa0>
 dfa:	88 23       	and	r24, r24
 dfc:	4a f0       	brmi	.+18     	; 0xe10 <__mulsf3_pse+0x7a>
 dfe:	ee 0f       	add	r30, r30
 e00:	ff 1f       	adc	r31, r31
 e02:	bb 1f       	adc	r27, r27
 e04:	66 1f       	adc	r22, r22
 e06:	77 1f       	adc	r23, r23
 e08:	88 1f       	adc	r24, r24
 e0a:	91 50       	subi	r25, 0x01	; 1
 e0c:	50 40       	sbci	r21, 0x00	; 0
 e0e:	a9 f7       	brne	.-22     	; 0xdfa <__mulsf3_pse+0x64>
 e10:	9e 3f       	cpi	r25, 0xFE	; 254
 e12:	51 05       	cpc	r21, r1
 e14:	80 f0       	brcs	.+32     	; 0xe36 <__mulsf3_pse+0xa0>
 e16:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_inf>
 e1a:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__fp_szero>
 e1e:	5f 3f       	cpi	r21, 0xFF	; 255
 e20:	e4 f3       	brlt	.-8      	; 0xe1a <__mulsf3_pse+0x84>
 e22:	98 3e       	cpi	r25, 0xE8	; 232
 e24:	d4 f3       	brlt	.-12     	; 0xe1a <__mulsf3_pse+0x84>
 e26:	86 95       	lsr	r24
 e28:	77 95       	ror	r23
 e2a:	67 95       	ror	r22
 e2c:	b7 95       	ror	r27
 e2e:	f7 95       	ror	r31
 e30:	e7 95       	ror	r30
 e32:	9f 5f       	subi	r25, 0xFF	; 255
 e34:	c1 f7       	brne	.-16     	; 0xe26 <__mulsf3_pse+0x90>
 e36:	fe 2b       	or	r31, r30
 e38:	88 0f       	add	r24, r24
 e3a:	91 1d       	adc	r25, r1
 e3c:	96 95       	lsr	r25
 e3e:	87 95       	ror	r24
 e40:	97 f9       	bld	r25, 7
 e42:	08 95       	ret

00000e44 <__divmodhi4>:
 e44:	97 fb       	bst	r25, 7
 e46:	07 2e       	mov	r0, r23
 e48:	16 f4       	brtc	.+4      	; 0xe4e <__divmodhi4+0xa>
 e4a:	00 94       	com	r0
 e4c:	07 d0       	rcall	.+14     	; 0xe5c <__divmodhi4_neg1>
 e4e:	77 fd       	sbrc	r23, 7
 e50:	09 d0       	rcall	.+18     	; 0xe64 <__divmodhi4_neg2>
 e52:	0e 94 36 07 	call	0xe6c	; 0xe6c <__udivmodhi4>
 e56:	07 fc       	sbrc	r0, 7
 e58:	05 d0       	rcall	.+10     	; 0xe64 <__divmodhi4_neg2>
 e5a:	3e f4       	brtc	.+14     	; 0xe6a <__divmodhi4_exit>

00000e5c <__divmodhi4_neg1>:
 e5c:	90 95       	com	r25
 e5e:	81 95       	neg	r24
 e60:	9f 4f       	sbci	r25, 0xFF	; 255
 e62:	08 95       	ret

00000e64 <__divmodhi4_neg2>:
 e64:	70 95       	com	r23
 e66:	61 95       	neg	r22
 e68:	7f 4f       	sbci	r23, 0xFF	; 255

00000e6a <__divmodhi4_exit>:
 e6a:	08 95       	ret

00000e6c <__udivmodhi4>:
 e6c:	aa 1b       	sub	r26, r26
 e6e:	bb 1b       	sub	r27, r27
 e70:	51 e1       	ldi	r21, 0x11	; 17
 e72:	07 c0       	rjmp	.+14     	; 0xe82 <__udivmodhi4_ep>

00000e74 <__udivmodhi4_loop>:
 e74:	aa 1f       	adc	r26, r26
 e76:	bb 1f       	adc	r27, r27
 e78:	a6 17       	cp	r26, r22
 e7a:	b7 07       	cpc	r27, r23
 e7c:	10 f0       	brcs	.+4      	; 0xe82 <__udivmodhi4_ep>
 e7e:	a6 1b       	sub	r26, r22
 e80:	b7 0b       	sbc	r27, r23

00000e82 <__udivmodhi4_ep>:
 e82:	88 1f       	adc	r24, r24
 e84:	99 1f       	adc	r25, r25
 e86:	5a 95       	dec	r21
 e88:	a9 f7       	brne	.-22     	; 0xe74 <__udivmodhi4_loop>
 e8a:	80 95       	com	r24
 e8c:	90 95       	com	r25
 e8e:	bc 01       	movw	r22, r24
 e90:	cd 01       	movw	r24, r26
 e92:	08 95       	ret

00000e94 <__itoa_ncheck>:
 e94:	bb 27       	eor	r27, r27
 e96:	4a 30       	cpi	r20, 0x0A	; 10
 e98:	31 f4       	brne	.+12     	; 0xea6 <__itoa_ncheck+0x12>
 e9a:	99 23       	and	r25, r25
 e9c:	22 f4       	brpl	.+8      	; 0xea6 <__itoa_ncheck+0x12>
 e9e:	bd e2       	ldi	r27, 0x2D	; 45
 ea0:	90 95       	com	r25
 ea2:	81 95       	neg	r24
 ea4:	9f 4f       	sbci	r25, 0xFF	; 255
 ea6:	0c 94 56 07 	jmp	0xeac	; 0xeac <__utoa_common>

00000eaa <__utoa_ncheck>:
 eaa:	bb 27       	eor	r27, r27

00000eac <__utoa_common>:
 eac:	fb 01       	movw	r30, r22
 eae:	55 27       	eor	r21, r21
 eb0:	aa 27       	eor	r26, r26
 eb2:	88 0f       	add	r24, r24
 eb4:	99 1f       	adc	r25, r25
 eb6:	aa 1f       	adc	r26, r26
 eb8:	a4 17       	cp	r26, r20
 eba:	10 f0       	brcs	.+4      	; 0xec0 <__utoa_common+0x14>
 ebc:	a4 1b       	sub	r26, r20
 ebe:	83 95       	inc	r24
 ec0:	50 51       	subi	r21, 0x10	; 16
 ec2:	b9 f7       	brne	.-18     	; 0xeb2 <__utoa_common+0x6>
 ec4:	a0 5d       	subi	r26, 0xD0	; 208
 ec6:	aa 33       	cpi	r26, 0x3A	; 58
 ec8:	08 f0       	brcs	.+2      	; 0xecc <__utoa_common+0x20>
 eca:	a9 5d       	subi	r26, 0xD9	; 217
 ecc:	a1 93       	st	Z+, r26
 ece:	00 97       	sbiw	r24, 0x00	; 0
 ed0:	79 f7       	brne	.-34     	; 0xeb0 <__utoa_common+0x4>
 ed2:	b1 11       	cpse	r27, r1
 ed4:	b1 93       	st	Z+, r27
 ed6:	11 92       	st	Z+, r1
 ed8:	cb 01       	movw	r24, r22
 eda:	0c 94 6f 07 	jmp	0xede	; 0xede <strrev>

00000ede <strrev>:
 ede:	dc 01       	movw	r26, r24
 ee0:	fc 01       	movw	r30, r24
 ee2:	67 2f       	mov	r22, r23
 ee4:	71 91       	ld	r23, Z+
 ee6:	77 23       	and	r23, r23
 ee8:	e1 f7       	brne	.-8      	; 0xee2 <strrev+0x4>
 eea:	32 97       	sbiw	r30, 0x02	; 2
 eec:	04 c0       	rjmp	.+8      	; 0xef6 <strrev+0x18>
 eee:	7c 91       	ld	r23, X
 ef0:	6d 93       	st	X+, r22
 ef2:	70 83       	st	Z, r23
 ef4:	62 91       	ld	r22, -Z
 ef6:	ae 17       	cp	r26, r30
 ef8:	bf 07       	cpc	r27, r31
 efa:	c8 f3       	brcs	.-14     	; 0xeee <strrev+0x10>
 efc:	08 95       	ret

00000efe <_exit>:
 efe:	f8 94       	cli

00000f00 <__stop_program>:
 f00:	ff cf       	rjmp	.-2      	; 0xf00 <__stop_program>
